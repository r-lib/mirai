[{"path":[]},{"path":"https://mirai.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://mirai.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://mirai.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://mirai.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://mirai.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://mirai.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://mirai.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://mirai.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://mirai.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://mirai.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://mirai.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://mirai.r-lib.org/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 mirai authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://mirai.r-lib.org/dev/articles/mirai-daemons.html","id":"local-daemons","dir":"Articles","previous_headings":"","what":"1. Local Daemons","title":"Daemons","text":"Daemons, persistent background processes, may set receive ‘mirai’ requests. typically going efficient new processes longer need created ad hoc basis. Daemons inherit default system configuration read relevant ‘.Renviron’ ‘.Rprofile’ etc. startup. also load default packages. instead load base package (cuts half R’s startup time), environment variable R_SCRIPT_DEFAULT_PACKAGES=NULL may set prior launching daemons.","code":""},{"path":"https://mirai.r-lib.org/dev/articles/mirai-daemons.html","id":"with-dispatcher-default","dir":"Articles","previous_headings":"1. Local Daemons","what":"With Dispatcher (default)","title":"Daemons","text":"Call daemons() specifying number daemons launch. default dispatcher = TRUE creates dispatcher() background process connects individual daemon processes local machine. ensures tasks dispatched efficiently first-first-(FIFO) basis daemons processing. Tasks queued dispatcher sent daemon soon can accept task immediate execution. Dispatcher uses synchronisation primitives nanonext, waiting upon tasks rather polling intervals. event-driven approach efficient consuming resources waiting, whilst also latency fully synchronised events. view current status, status() provides: number active connections, URL daemons connect , task summary: waiting number tasks queued execution dispatcher assigned number tasks sent daemon execution complete number tasks result received (either completed cancelled) Set number daemons zero reset. reverts default creating new background process ‘mirai’ request.","code":"daemons(6) #> [1] 6 status() #> $connections #> [1] 6 #>  #> $daemons #> [1] \"abstract://99760964cb9d7ab15077f9e8\" #>  #> $mirai #>  awaiting executing completed  #>         0         0         0 daemons(0) #> [1] 0"},{"path":"https://mirai.r-lib.org/dev/articles/mirai-daemons.html","id":"without-dispatcher","dir":"Articles","previous_headings":"1. Local Daemons","what":"Without Dispatcher","title":"Daemons","text":"Alternatively, specifying dispatcher = FALSE, background daemons connect directly host process. means tasks sent immediately round-robin fashion, ensures evenly-distributed amongst daemons. however guarantee optimal scheduling, duration tasks known priori. example, tasks queued daemon behind long-running task, whilst daemons idle already completed tasks. advantage approach resource-light require additional dispatcher process. suited working similar-length tasks, concurrent tasks typically exceed available daemons. Requesting status now shows 6 connections, along host URL:","code":"daemons(6, dispatcher = FALSE) #> [1] 6 status() #> $connections #> [1] 6 #>  #> $daemons #> [1] \"abstract://8573c41da7c7aff98624f79c\""},{"path":"https://mirai.r-lib.org/dev/articles/mirai-daemons.html","id":"everywhere","dir":"Articles","previous_headings":"1. Local Daemons","what":"Everywhere","title":"Daemons","text":"everywhere() may used evaluate expression connected daemons persist resultant state, regardless daemon’s ‘cleanup’ setting. keeps DBI package loaded evaluations. types setup task may also performed, including making common resource available, database connection: super-assignment, conenction ‘con’ available global environment daemon instances. Subsequent mirai calls may make use ‘con’. Disconnect database everywhere: Sometimes may necessary evaluate expression global environment daemon. mirai evaluation occur global environment , one inheriting , explicit call evalq(envir = .GlobalEnv) achieves . example use case box::use() import module package:","code":"everywhere(library(DBI)) everywhere(con <<- dbConnect(RSQLite::SQLite(), file), file = tempfile()) mirai(exists(\"con\"))[] #> [1] TRUE everywhere(dbDisconnect(con)) everywhere(   evalq(     box::use(dplyr[select], mirai[...]),     envir = .GlobalEnv   ) )  daemons(0) #> [1] 0"},{"path":"https://mirai.r-lib.org/dev/articles/mirai-daemons.html","id":"with-method","dir":"Articles","previous_headings":"1. Local Daemons","what":"With Method","title":"Daemons","text":"daemons() () method, evaluates expression daemons created duration expression automatically torn upon completion. originally designed running Shiny app desired number daemons, example : Note: assumed app already created. Wrapping call shiny::shinyApp() work runApp() implicitly called app printed, however printing occurs () returned, hence app run outside scope () statement. case Shiny app, mirai calls executed app returns app blocking. case expressions, sure call results (collect values) mirai within expression ensure complete daemons torn . specifying compute profile daemons() call (see ), calls .compute = NULL within () clause default compute profile.","code":"with(daemons(4), shiny::runApp(app))"},{"path":"https://mirai.r-lib.org/dev/articles/mirai-daemons.html","id":"remote-daemons","dir":"Articles","previous_headings":"","what":"2. Remote Daemons","title":"Daemons","text":"daemons interface may also used send tasks computation remote daemon processes network. Call daemons() specifying ‘url’ character string : ‘tcp://10.75.32.70:5555’ daemon processes connect. Alternatively, use host_url() automatically construct valid URL. host (dispatcher) listens address, utilising single port. IPv6 addresses also supported must enclosed square brackets [] avoid confusion final colon separating port. example, port 5555 IPv6 address ::ffff:a6f:50d specified tcp://[::ffff:a6f:50d]:5555. options actually launching daemons, please see next section. , calling host_url() without port value uses default ‘0’. wildcard value automatically assigns free ephemeral port: actual assigned port may queried time via status(): number daemons connected time may dynamically scaled , according requirements. reset connections revert default behaviour: Closing connection causes connected daemons exit automatically. using dispatcher, cause dispatcher exit, turn connected daemons respective connections dispatcher terminated.","code":"daemons(url = host_url()) #> [1] 0 status() #> $connections #> [1] 0 #>  #> $daemons #> [1] \"tcp://192.168.1.71:44557\" #>  #> $mirai #>  awaiting executing completed  #>         0         0         0 daemons(0) #> [1] 0"},{"path":"https://mirai.r-lib.org/dev/articles/mirai-daemons.html","id":"launching-remote-daemons","dir":"Articles","previous_headings":"","what":"3. Launching Remote Daemons","title":"Daemons","text":"launch remote daemons, supply remote launch configuration ‘remote’ argument daemons(), launch_remote() time thereafter. currently two options generating remote launch configurations: ssh_config() SSH access remote machine. remote_config() provides flexible method using cluster resource managers, custom launcher.","code":""},{"path":"https://mirai.r-lib.org/dev/articles/mirai-daemons.html","id":"ssh-direct-connection","dir":"Articles","previous_headings":"3. Launching Remote Daemons","what":"SSH Direct Connection","title":"Daemons","text":"method appropriate internal networks trusted, properly-configured environments safe machine accept incoming connections certain ports. examples , remote daemons connect back directly port 5555 local machine. cases, using TLS often desirable provide additional security connections. first example launches 4 daemons machine 10.75.32.90 (using default SSH port 22 specified), connecting back host URL: second example launches one daemon 10.75.32.90 10.75.32.91 using custom SSH port 222:","code":"daemons(   n = 4,   url = host_url(tls = TRUE, port = 5555),   remote = ssh_config(\"ssh://10.75.32.90\") ) daemons(   n = 1,   url = host_url(tls = TRUE, port = 5555),   remote = ssh_config(c(\"ssh://10.75.32.90:222\", \"ssh://10.75.32.91:222\")) )"},{"path":"https://mirai.r-lib.org/dev/articles/mirai-daemons.html","id":"ssh-tunnelling","dir":"Articles","previous_headings":"3. Launching Remote Daemons","what":"SSH Tunnelling","title":"Daemons","text":"Use SSH tunnelling launch daemons machine able access via SSH, whether local network cloud. SSH key-based authentication must already place, configuration required. provides convenient way launch remote daemons without needing directly access host. Firewall configurations security policies often prevent opening port accept outside connections. cases, SSH tunnelling creates tunnel initial SSH connection made. simplicity, implementation mirai uses tunnel port host daemon. use tunnelling, supply URL hostname ‘127.0.0.1’ ‘url’ daemons() call. local_url(tcp = TRUE) . default uses wildcard port ‘0’, assigns free ephemeral port. Whilst convenient, small possibility port may available daemons. hence preferable specify specific port whitelisted use, possible. example, local_url(tcp = TRUE, port = 5555) specified, tunnel created using port 5555 machine. host listens 127.0.0.1:5555 side, daemons dial 127.0.0.1:5555 respective machines. example launches 2 daemons remote machine 10.75.32.90 using SSH tunnelling:","code":"daemons(   n = 2,   url = local_url(tcp = TRUE),   remote = ssh_config(\"ssh://10.75.32.90\", tunnel = TRUE) )"},{"path":"https://mirai.r-lib.org/dev/articles/mirai-daemons.html","id":"cluster-resource-managers","dir":"Articles","previous_headings":"3. Launching Remote Daemons","what":"Cluster Resource Managers","title":"Daemons","text":"remote_config() may used run command deploy daemons using resource manager. Taking Slurm example, following uses sbatch launch daemon cluster, additional arguments sbatch specifying resource allocation:","code":"daemons(   n = 2,   url = host_url(),   remote = remote_config(     command = \"sbatch\",     args = c(\"--mem 512\", \"-n 1\", \"--wrap\", \".\"),     rscript = file.path(R.home(\"bin\"), \"Rscript\"),     quote = TRUE   ) )"},{"path":"https://mirai.r-lib.org/dev/articles/mirai-daemons.html","id":"manual-deployment","dir":"Articles","previous_headings":"3. Launching Remote Daemons","what":"Manual Deployment","title":"Daemons","text":"alternative automated launches, calling launch_remote() without specifying ‘remote’ may used return shell commands deploying daemons manually. printed return values may copy / pasted directly remote machine e.g. via terminal session.","code":"daemons(url = host_url()) #> [1] 0 launch_remote(2) #> [1] #> Rscript -e 'mirai::daemon(\"tcp://192.168.1.71:39155\")' #>  #> [2] #> Rscript -e 'mirai::daemon(\"tcp://192.168.1.71:39155\")' daemons(0) #> [1] 0"},{"path":"https://mirai.r-lib.org/dev/articles/mirai-daemons.html","id":"tls-secure-connections","dir":"Articles","previous_headings":"","what":"4. TLS Secure Connections","title":"Daemons","text":"TLS provides robust solution securing communications local machine remote daemons.","code":""},{"path":"https://mirai.r-lib.org/dev/articles/mirai-daemons.html","id":"automatic-zero-configuration-default","dir":"Articles","previous_headings":"4. TLS Secure Connections","what":"Automatic Zero-configuration Default","title":"Daemons","text":"Simply specify secure URL using scheme tls+tcp:// setting daemons, use host_url(tls = TRUE), example: Single-use keys certificates automatically generated configured, without requiring intervention. private key always retained host machine never transmitted. generated self-signed certificate available via launch_remote(), included part shell command manually launching daemon remote machine.","code":"daemons(url = host_url(tls = TRUE)) #> [1] 0 launch_remote(1) #> [1] #> Rscript -e 'mirai::daemon(\"tls+tcp://192.168.1.71:42017\",tls=c(\"-----BEGIN CERTIFICATE----- #> MIIFPzCCAyegAwIBAgIBATANBgkqhkiG9w0BAQsFADA3MRUwEwYDVQQDDAwxOTIu #> MTY4LjEuNzExETAPBgNVBAoMCE5hbm9uZXh0MQswCQYDVQQGEwJKUDAeFw0wMTAx #> MDEwMDAwMDBaFw0zMDEyMzEyMzU5NTlaMDcxFTATBgNVBAMMDDE5Mi4xNjguMS43 #> MTERMA8GA1UECgwITmFub25leHQxCzAJBgNVBAYTAkpQMIICIjANBgkqhkiG9w0B #> AQEFAAOCAg8AMIICCgKCAgEAs4GhSh0H3jT6iWT612qWipVTjHkogqoRDouiZBQ2 #> Xz8A0rQeC+v0AD6pVEkh8Q3pysxw/F9qnTGZII4eosSSyozzsdxHPIC2dU4x9wQi #> Df82CfVsGsBeO2oKdhP+yaUY1VDYORg8daTvKDqStH+3vgxyr/o0ANvPSBqoTh4E #> TbHCu9Jz0SxgvbuPluOXZbWV8+pelX6NvX6uoIzS3Q0Fjy8eu2sXknT792n9DV9s #> Lbf9ipv7JlBU0qo6IP+BUvS0Lu/i8n8vzomnjnUFzV6WoY/qN3WgoWGf7VWHomaC #> koauLYkZUOt86pRaQuXHybm0OUFs2CPducYQfNiDvJyXm2PLga5Mf/Etxd8i7+Ws #> HeR+xbqjJNbO4xdwhSDWdg3N0mJ2fTGDup/V+NBpo39H72Db66kR70jYJnbpvaEk #> gQG05tgB9TR4UvyKOZQsvziUPinJdIaJayZ3QG6XGlmqNtcB9cJuGQACyT40Q1mc #> 5svlU8PIwyz9fG+8zZxEJMJRR70qp6Ksxnj+44/ju2oU8s8zlIXrpvMQeayjcSfm #> 7ePcpvA3lIWV9x/PP+LiZ3cemY32cISBnavrnR30r5H1bi+9Owe7sH4j17MCN6Wo #> YQoldtGhQwavSj2DM7W2n1+Wn4cojTO2TLp1NTFBX6EJ0OR158hPTqRnVkIuDn4U #> BecCAwEAAaNWMFQwEgYDVR0TAQH/BAgwBgEB/wIBADAdBgNVHQ4EFgQU7sjF84Hj #> 7C5eDENNqJ3+bMGt4W0wHwYDVR0jBBgwFoAU7sjF84Hj7C5eDENNqJ3+bMGt4W0w #> DQYJKoZIhvcNAQELBQADggIBAJKRjdGf0fanRf9OOuJqtc5koTQw9a8gQ9SAAWzO #> hGXdeI+jkLnMr2Xj9Li8FwWYaxFzFTyiQizaXtgoyrZPJPwvRy/hPmI1UohaeJz6 #> O009ins92l0s2XMRZkJ+QKnozmeUBMF/L/wzggmy1k2cH8JyUlz2DUiRZxCDlqAj #> VtIGfPl6a2VEHSljhHQOu+E7dRIx3t+cMQAGdyzFrgjBsRhoc0Xq+lCBwNgYutkV #> oDu5oPupq9CEFzl6uo2+XhyNEtqe80W+eIrXaTM9+w+ETxJgJi2nfZFyE0JDD6yQ #> 5js7Vf39tO4v+fnXuGWeVhsQzZ3QPYcFqVL4oFCKKjEuZizLiizmCWdX1VbBmaKK #> oHvaozN30J/eKe3zWJeHeFb4E3QeJ5nH+QhMxe7F0xPlMqT1KTNTl/+H7lRIgoVQ #> OX+m/b+P/Tn2AEjDgzdM1uhruEZCXH9fOAZf+z+x04K3ezPvYn1EDdmEWZSRnzff #> XWLRydV9ffHu66bPd4lg8ovqN/E88iUIoSzGjRZ37/B3f89XztmQZlBPs8fmsp85 #> 8gm01Cd5BivMNydPyreJjigVNFP4Bg7qT7QsZ6AYs8ZkT2/oK7S8zwIiu8sgz/f5 #> mQz2qKCOJRsJxk0TzqM1x5pnXOq9BAaWJLibu6E0B6Nhax1OlZupkcyuqhOn5bcA #> f1gs #> -----END CERTIFICATE----- #> \",\"\"))' daemons(0) #> [1] 0"},{"path":"https://mirai.r-lib.org/dev/articles/mirai-daemons.html","id":"ca-signed-certificates","dir":"Articles","previous_headings":"4. TLS Secure Connections","what":"CA Signed Certificates","title":"Daemons","text":"alternative zero-configuration default, certificate may also generated via Certificate Signing Request (CSR) Certificate Authority (CA). CA may public CA internal organisation. Generate private key CSR. following resources describe : using Mbed TLS: https://mbed-tls.readthedocs.io/en/latest/kb/-/generate--certificate-request-csr/ using OpenSSL: https://www.feistyduck.com/library/openssl-cookbook/online/ (Chapter 1.2 Key Certificate Management) Provide generated CSR CA sign new TLS certificate. common name (CN) certificate must identical hostname IP address actually used connection. verified, fail . received certificate comprise block cipher text markers -----BEGIN CERTIFICATE----- -----END CERTIFICATE-----. Make sure request certificate PEM format. available formats, TLS library used usually provide conversion utilities. Check also private key block cipher text markers -----BEGIN PRIVATE KEY----- -----END PRIVATE KEY-----. setting daemons, TLS certificate private key provided ‘tls’ argument daemons(). certificate private key imported character strings cert key respectively, ‘tls’ argument may specified character vector c(cert, key). Alternatively, certificate may copied new text file, private key appended, case path/filename file may provided ‘tls’ argument. launching daemons, certificate chain CA supplied ‘tls’ argument daemon() launch_remote(). certificate chain comprise multiple certificates, -----BEGIN CERTIFICATE----- -----END CERTIFICATE----- markers. first one newly-generated TLS certificate, supplied daemons(), final one CA root certificate. certificates required certificate signed directly CA. , intermediate certificates included certificate chain starts TLS certificate ends certificate CA. concatenated together single character string certchain, character vector comprising empty character string c(certchain, \"\") may supplied relevant ‘tls’ argument. Alternatively, written file (file replicated remote machines), ‘tls’ argument may also specified path/filename (assuming machine).","code":""},{"path":"https://mirai.r-lib.org/dev/articles/mirai-daemons.html","id":"compute-profiles","dir":"Articles","previous_headings":"","what":"5. Compute Profiles","title":"Daemons","text":"daemons() interface also allows specification compute profiles managing tasks heterogeneous compute requirements: send tasks different daemons clusters daemons appropriate specifications (terms CPUs / memory / GPU / accelerators etc.) split tasks local remote computation Simply specify argument .compute character profile name (, NULL, ‘default’). daemons settings saved named profile. create ‘mirai’ task using specific compute profile, specify ‘.compute’ argument mirai(), uses ‘default’ compute profile NULL. Similarly, functions status(), launch_local() launch_remote() specified desired ‘.compute’ argument.","code":""},{"path":"https://mirai.r-lib.org/dev/articles/mirai-map.html","id":"introduction","dir":"Articles","previous_headings":"","what":"1. Introduction","title":"Mirai Map","text":"mirai_map() performs asynchronous parallel/distributed map using mirai. function similar purrr::map(), returns ‘mirai_map’ object. also advanced allows multiple map rows dataframe matrix. fact used implement parallel map variations package. results mirai_map x may collected using x[]. waits asynchronous operations complete still progress.","code":""},{"path":"https://mirai.r-lib.org/dev/articles/mirai-map.html","id":"key-advantages","dir":"Articles","previous_headings":"","what":"2. Key Advantages","title":"Mirai Map","text":"Returns immediately evaluations taking place asynchronously. Printing ‘mirai map’ object shows current completion progress. ‘.promise’ argument allows promise registered mirai, can used perform side-effects (checkpointing sending progress update). Returns evaluation errors ‘miraiError’ ‘errorValue’ case may , rather causing entire operation fail. allows efficient recovery partial failure. rely ‘chunking’ algorithm attempts split work batches according number available daemons, implemented instance parallel package. Chunking take account varying unpredictable compute times indices, mirai scheduling designed deal optimally. demonstrated example . .args used specify constant arguments .f - ‘mean’ ‘sd’ example : Use ... specify objects referenced defined .f - ‘’ anonymous function : Use mirai_map() requires daemons() previously set, error case.","code":"library(mirai) library(parallel) cl <- make_cluster(4) daemons(4) #> [1] 4 vec <- c(1, 1, 4, 4, 1, 1, 1, 1) system.time(mirai_map(vec, Sys.sleep)[]) #>    user  system elapsed  #>   0.006   0.004   4.006 system.time(parLapply(cl, vec, Sys.sleep)) #>    user  system elapsed  #>   0.019   0.042   8.073 daemons(0) #> [1] 0 with(   daemons(3, dispatcher = FALSE),   mirai_map(1:3, rnorm, .args = list(mean = 20, sd = 2))[] ) #> [[1]] #> [1] 20.45311 #>  #> [[2]] #> [1] 17.50899 18.70689 #>  #> [[3]] #> [1] 24.49598 21.52816 21.03546 daemons(4) #> [1] 4 ml <- mirai_map(   c(a = 1, b = 2, c = 3),   function(x) do(x, as.logical(x %% 2)),   do = nanonext::random ) ml #> < mirai map [0/3] > ml[] #> $a #> [1] \"b6\" #>  #> $b #> [1] 05 73 #>  #> $c #> [1] \"6deff8\""},{"path":"https://mirai.r-lib.org/dev/articles/mirai-map.html","id":"collecting-results","dir":"Articles","previous_headings":"","what":"3. Collecting Results","title":"Mirai Map","text":"collecting results, optionally specify arguments []: x[.flat] collects flattens results, checking type avoid coercion. x[.progress] collects results using cli progress bar, available, showing completion percentage ETA, else simple text progress indicator parts completed total. map operation completes quickly, cli progress bar may show , design. x[.stop] collects results applying early stopping, stops first failure cancels remaining computations. cli package available, used displaying error message. Combinations may supplied fashion x[.stop, .progress].","code":"mirai_map(list(a = 1, b = \"a\", c = 3), function(x) exp(x))[.stop] #> Error in `mirai_map()`: #> ℹ In index: 2. #> ℹ With name: b. #> Caused by error in `exp()`: #> ! non-numeric argument to mathematical function  with(   daemons(4, dispatcher = FALSE, .compute = \"sleep\"),   mirai_map(c(0.1, 0.2, 0.3), Sys.sleep)[.progress, .flat] ) #> NULL"},{"path":"https://mirai.r-lib.org/dev/articles/mirai-map.html","id":"multiple-map","dir":"Articles","previous_headings":"","what":"4. Multiple Map","title":"Mirai Map","text":"Multiple map performed rows dataframe matrix, often desired behaviour. dataframe often contains columns differing type, unusual want map columns, however possible simply transforming beforehand list using .list(). allows map 2 arguments specifying dataframe. One may index value indexed map. function .f must take many arguments columns, either explicitly via .... mirai_map() maps matrix rows, consistent behaviour dataframes Note different behaviour lapply() purrr::map(), treats matrix ordinary vector. instead, mapping columns desired, simply take transpose matrix beforehand using t().","code":"fruit <- c(\"melon\", \"grapes\", \"coconut\")  # create a dataframe for indexed map: df <- data.frame(i = seq_along(fruit), fruit = fruit)  with(   daemons(3, dispatcher = FALSE, .compute = \"fruit\"),   mirai_map(df, sprintf, .args = list(fmt = \"%d. %s\"))[.flat] ) #> [1] \"1. melon\"   \"2. grapes\"  \"3. coconut\" mat <- matrix(1:4, nrow = 2L, dimnames = list(c(\"a\", \"b\"), c(\"y\", \"z\"))) mirai_map(mat, function(x = 10, y = 0, z = 0) x + y + z)[.flat] #>  a  b  #> 14 16  daemons(0) #> [1] 0"},{"path":"https://mirai.r-lib.org/dev/articles/mirai-promises.html","id":"event-driven-promises","dir":"Articles","previous_headings":"","what":"1. Event-driven promises","title":"Promises - Shiny and Plumber","text":"mirai supplies .promise() method, allowing used promise promises package. next-generation, event-driven promises, developed collaboration Joe Cheng (creator Shiny). Promise actions triggered soon ‘mirai’ resolves, without time-polling completion future_promise() . Allows much higher responsiveness (zero latency) massive scalability (thousands even millions promises). ‘mirai’ may piped directly using promise pipe %...>%, implicitly calls .promise() ‘mirai’. Similarly, promise-aware functions promises::() shiny::ExtendedTask$new() accept ‘mirai’ directly. Alternatively, ‘mirai’ may explicitly converted promise .promise(), allows using methods $(), $finally() etc. directly. following example outputs “hello” console one second ‘mirai’ resolves. possible access ‘mirai’ value $data use promise enacting side effect (assigning value environment example ). returning top level prompt: mirai_map also .promise() method. resoles entire map operation completes least one mirai map rejected.","code":"library(mirai) library(promises)  p <- mirai({Sys.sleep(1); \"hello\"}) %...>% cat() p #> <Promise [pending]> env <- new.env()  m <- mirai({   Sys.sleep(1)   \"hello\" })  promises::then(m, function(x) env$res <- x)  m[] #> [1] \"hello\" env$res #> [1] \"hello\""},{"path":"https://mirai.r-lib.org/dev/articles/mirai-promises.html","id":"the-one-million-promises-challenge","dir":"Articles","previous_headings":"","what":"2. The One Million Promises Challenge","title":"Promises - Shiny and Plumber","text":"code taken challenge launch collect one million promises. illustration, example scaled ten thousand. one million promises challenge took 6 mins 25 secs complete using Intel i7 11th gen mobile processor 16GB RAM.","code":"library(mirai) daemons(8, dispatcher = FALSE) #> [1] 8 r <- 0 start <- Sys.time() m <- mirai_map(1:10000, \\(x) x, .promise = \\(x) r <<- r + x) Sys.time() - start #> Time difference of 2.808281 secs later::run_now() r #> [1] 50005000 daemons(0) #> [1] 0"},{"path":"https://mirai.r-lib.org/dev/articles/mirai-promises.html","id":"shiny-extendedtask-introduction","dir":"Articles","previous_headings":"","what":"3. Shiny ExtendedTask: Introduction","title":"Promises - Shiny and Plumber","text":"mirai asynchronous backend scale Shiny applications. Depending options supplied daemons(), mirai tasks may distributed across parallel processes locally across network. Shiny ExtendedTask allows creation scalable Shiny apps, remain responsive intra-session user, well inter-session multiple concurrent users. example , app remains responsive, clock continuing tick whilst simulated expensive computation running asynchronously parallel process. Also button disabled plot greyed computation complete. call daemons() made top level, onStop() may used automatically shut app exits. Thanks Joe Cheng providing examples based. key components using ExtendedTask : UI, use bslib::input_task_button(). button disabled computation prevent additional clicks. server, create ExtendedTask object calling ExtendedTask$new() anonymous function passing ... arguments mirai(), bind button created (1). server, create observer input button, invokes ExtendedTask, passing named arguments anonymous function (hence mirai) . server, create render function output, consumes result ExtendedTask.","code":"library(shiny) library(bslib) library(mirai)  ui <- page_fluid(   p(\"The time is \", textOutput(\"current_time\", inline = TRUE)),   hr(),   numericInput(\"n\", \"Sample size (n)\", 100),   numericInput(\"delay\", \"Seconds to take for plot\", 5),   input_task_button(\"btn\", \"Plot uniform distribution\"),   plotOutput(\"plot\") )  server <- function(input, output, session) {   output$current_time <- renderText({     invalidateLater(1000)     format(Sys.time(), \"%H:%M:%S %p\")   })    task <- ExtendedTask$new(     function(...) mirai({Sys.sleep(y); runif(x)}, ...)   ) |> bind_task_button(\"btn\")    observeEvent(input$btn, task$invoke(x = input$n, y = input$delay))    output$plot <- renderPlot(hist(task$result()))  }  # run app using 1 local daemon daemons(1)  # automatically shutdown daemons when app exits onStop(function() daemons(0))  shinyApp(ui = ui, server = server) input_task_button(\"btn\", \"Plot uniform distribution\") task <- ExtendedTask$new(   function(...) mirai({Sys.sleep(y); runif(x)}, ...) ) |> bind_task_button(\"btn\") observeEvent(input$btn, task$invoke(x = input$n, y = input$delay)) output$plot <- renderPlot(hist(task$result()))"},{"path":"https://mirai.r-lib.org/dev/articles/mirai-promises.html","id":"shiny-extendedtask-cancellation","dir":"Articles","previous_headings":"","what":"4. Shiny ExtendedTask: Cancellation","title":"Promises - Shiny and Plumber","text":"app demonstration mirai’s cancellation capability. Cancellation performed way irrespective mirai task may executing, locally remotely. builds introductory app adding button sends infinite sleep extendedTask. block execution using single daemon - new extendedTasks queued behind never-ending task. also button cancel blocking task allow queued plots continue processing. works assigning reference mirai created extendedTask$new() method, can passed stop_mirai(). Thanks Joe Cheng providing examples based.","code":"library(shiny) library(bslib) library(mirai)  ui <- page_fluid(   p(\"The time is \", textOutput(\"current_time\", inline = TRUE)),   hr(),   numericInput(\"n\", \"Sample size (n)\", 100),   numericInput(\"delay\", \"Seconds to take for plot\", 5),   input_task_button(\"btn\", \"Plot uniform distribution\"),   hr(),   p(\"Click 'block' to suspend execution, and 'cancel' to resume\"),   input_task_button(\"block\", \"Block\"),   actionButton(\"cancel\", \"Cancel block\"),   hr(),   plotOutput(\"plot\") )  server <- function(input, output, session) {   output$current_time <- renderText({     invalidateLater(1000)     format(Sys.time(), \"%H:%M:%S %p\")   })    task <- ExtendedTask$new(     function(...) mirai({Sys.sleep(y); runif(x)}, ...)   ) |> bind_task_button(\"btn\")    m <- NULL   block <- ExtendedTask$new(     function() m <<- mirai(Sys.sleep(Inf))   ) |> bind_task_button(\"block\")    observeEvent(input$btn, task$invoke(x = input$n, y = input$delay))   observeEvent(input$block, block$invoke())   observeEvent(input$cancel, stop_mirai(m))   observe({     updateActionButton(session, \"cancel\", disabled = block$status() != \"running\")   })    output$plot <- renderPlot(hist(task$result()))  }  # run app using 1 local daemon daemons(1)  # automatically shutdown daemons when app exits onStop(function() daemons(0))  shinyApp(ui = ui, server = server)"},{"path":"https://mirai.r-lib.org/dev/articles/mirai-promises.html","id":"shiny-extendedtask-generative-art","dir":"Articles","previous_headings":"","what":"5. Shiny ExtendedTask: Generative Art","title":"Promises - Shiny and Plumber","text":"following app produces pretty spiral patterns. user can add multiple plots, making use Shiny modules, different calculation time. plots generated asynchronously, easy see practical limitations number daemons set. example, updating 4 plots, 3 daemons, 4th plot start generated one plots finished. wrapping runApp() call (daemons(...), ...) daemons set duration app, exiting automatically app stopped. example builds original code Joe Cheng, Daniel Woodie William Landau. uses environment() instead ... alternative equivalent way passing variables present calling environment mirai. key components using ExtendedTask example : UI, use bslib::input_task_button(). button disabled computation prevent additional clicks. server, create ExtendedTask object calling ExtendedTask$new() anonymous function passing named arguments mirai(), bind button created (1). passed mirai use environment(). server, create observer input button, invokes ExtendedTask, supplying arguments anonymous function . server, create render function output, consumes result ExtendedTask.","code":"library(shiny) library(mirai) library(bslib) library(ggplot2) library(aRtsy)  # function definitions  run_task <- function(calc_time) {   Sys.sleep(calc_time)   list(     colors = aRtsy::colorPalette(name = \"random\", n = 3),     angle = runif(n = 1, min = - 2 * pi, max = 2 * pi),     size = 1,     p = 1   ) }  plot_result <- function(result) {   do.call(what = canvas_phyllotaxis, args = result) }  # modules for individual plots  plotUI <- function(id, calc_time) {   ns <- NS(id)   card(     strong(paste0(\"Plot (calc time = \", calc_time, \" secs)\")),     input_task_button(ns(\"resample\"), \"Resample\"),     plotOutput(ns(\"plot\"), height=\"400px\", width=\"400px\")   ) }  plotServer <- function(id, calc_time) {   force(id)   force(calc_time)   moduleServer(     id,     function(input, output, session) {        task <- ExtendedTask$new(         function(time, run) mirai(run(time), environment())       ) |> bind_task_button(\"resample\")        observeEvent(input$resample, task$invoke(calc_time, run_task))        output$plot <- renderPlot(plot_result(task$result()))      }   ) }  # ui and server  ui <- page_sidebar(fillable = FALSE,   sidebar = sidebar(     numericInput(\"calc_time\", \"Calculation time (secs)\", 5),     actionButton(\"add\", \"Add\", class=\"btn-primary\"),   ),   layout_column_wrap(id = \"results\", width = \"400px\", fillable = FALSE) )  server <- function(input, output, session) {    observeEvent(input$add, {     id <- nanonext::random(4)     insertUI(\"#results\", where = \"beforeEnd\", ui = plotUI(id, input$calc_time))     plotServer(id, input$calc_time)   }) }  app <- shinyApp(ui, server)  # run app using 3 local daemons with(daemons(3), runApp(app)) input_task_button(ns(\"resample\"), \"Resample\") task <- ExtendedTask$new(   function(time, run) mirai(run(time), environment()) ) |> bind_task_button(\"resample\") observeEvent(input$resample, task$invoke(calc_time, run_task)) output$plot <- renderPlot(plot_result(task$result()))"},{"path":"https://mirai.r-lib.org/dev/articles/mirai-promises.html","id":"shiny-extendedtask-mirai-map","dir":"Articles","previous_headings":"","what":"6. Shiny ExtendedTask: mirai map","title":"Promises - Shiny and Plumber","text":"mirai_map also .promise() method, allows used directly Shiny ExtendedTask. resolve entire map operation completes least one mirai map rejected. example, uses mirai_map() perform multiple calculations simultaneously multiple daemons, returning results asynchronously.","code":"library(shiny) library(bslib) library(mirai)  ui <- page_fluid(   titlePanel(\"ExtendedTask Map Demo\"),   hr(),   p(\"The time is \", textOutput(\"current_time\", inline = TRUE)),   p(\"Perform 4 calculations that each take between 1 and 4 secs to complete:\"),   input_task_button(\"calculate\", \"Calculate\"),   p(textOutput(\"result\")),   tags$style(type=\"text/css\", \"#result {white-space: pre-wrap;}\") )  server <- function(input, output) {   task <- ExtendedTask$new(function() {     mirai_map(1:4, function(i) {       # simulated long calculation       Sys.sleep(i)       sprintf(         \"Calc %d | PID %d | Finished at %s.\", i, Sys.getpid(), format(Sys.time())       )     })   }) |> bind_task_button(\"calculate\")      observeEvent(input$calculate, {     task$invoke()   })      output$result <- renderText({     # result of mirai_map() is a list     as.character(task$result())   }, sep = \"\\n\")      output$current_time <- renderText({     invalidateLater(1000)     format(Sys.time(), \"%H:%M:%S %p\")   }) }  app <- shinyApp(ui, server) with(daemons(4), runApp(app))"},{"path":"https://mirai.r-lib.org/dev/articles/mirai-promises.html","id":"shiny-async-coin-flips","dir":"Articles","previous_headings":"","what":"7. Shiny Async: Coin Flips","title":"Promises - Shiny and Plumber","text":"example demonstrates integrate mirai_map() operation Shiny app observer, without using ExtendedTask. specifying ‘.promise’ argument, registers promise action mapped operation. can used update reactive values otherwise interact Shiny app. adaptation original example provided Landau use crew Shiny. Please see https://wlandau.github.io/crew/articles/shiny.html.","code":"library(shiny) library(mirai)  flip_coin <- function(...) {   Sys.sleep(0.1)   rbinom(n = 1, size = 1, prob = 0.501) }  ui <- fluidPage(   div(\"Is the coin fair?\"),   actionButton(\"task\", \"Flip 1000 coins\"),   textOutput(\"status\"),   textOutput(\"outcomes\") )  server <- function(input, output, session) {    # Keep running totals of heads, tails, and task errors   flips <- reactiveValues(heads = 0, tails = 0, flips = 0)    # Button to submit a batch of coin flips   observeEvent(input$task, {     mirai_map(       1:1000,       flip_coin,       .promise = \\(x) {         if (x) flips$heads <- flips$heads + 1 else flips$tails <- flips$tails + 1       }     )     # Ensure there is something after mirai_map() in the observer, as it is     # convertible to a promise, and will otherwise be waited for before returning     flips$flips <- flips$flips + 1000   })    # Print time and task status   output$status <- renderText({     invalidateLater(millis = 1000)     time <- format(Sys.time(), \"%H:%M:%S\")     sprintf(\"%s | %s flips submitted\", time, flips$flips)   })    # Print number of heads and tails   output$outcomes <- renderText(     sprintf(\"%s heads %s tails\", flips$heads, flips$tails)   )  }  app <- shinyApp(ui = ui, server = server)  # run app using 8 local non-dispatcher daemons (tasks are the same length) with(daemons(8, dispatcher = FALSE), {   # pre-load flip_coin function on all daemons for efficiency   everywhere({}, flip_coin = flip_coin)   runApp(app) })"},{"path":"https://mirai.r-lib.org/dev/articles/mirai-promises.html","id":"shiny-async-progress-bar","dir":"Articles","previous_headings":"","what":"8. Shiny Async: Progress Bar","title":"Promises - Shiny and Plumber","text":"example uses mirai_map() operation observer update Shiny progress bar custom messages, also update reactive value entire map operation completed (asynchronously). example adapts contribution Davide Magno.","code":"library(shiny) library(mirai) library(promises)  slow_squared <- function(x) {   Sys.sleep(runif(1))   x^2 }  ui <- fluidPage(   titlePanel(\"Asynchronous Squares Calculator\"),   p(\"The time is \", textOutput(\"current_time\", inline = TRUE)),   hr(),   actionButton(\"start\", \"Start Calculation\"),   br(), br(),   uiOutput(\"progress_ui\"),   verbatimTextOutput(\"result\") )  server <- function(input, output, session) {   x <- 1:100   y <- reactiveVal()      observeEvent(input$start, {          progress <- Progress$new(session, min = 0, max = length(x))     progress$set(message = \"Parallel calculation in progress\", detail = \"Starting...\")     completed <- reactiveVal(0)     mirai_map(       x,       slow_squared,       slow_squared = slow_squared,       .promise = function(result) {         new_val <- completed() + 1         completed(new_val)  # Increment completed counter         progress$inc(1, detail = paste(\"Completed\", new_val))  # Update progress       }     ) %...>% {       y(unlist(.))       progress$close()     }     # Ensure there is something after mirai_map() in the observer, as otherwise     # the created promise will be waited for before returning     y(0)   })   output$current_time <- renderText({     invalidateLater(1000)     format(Sys.time(), \"%H:%M:%S %p\")   })   output$result <- renderPrint({     cat(\"Sum of squares calculated: \", sum(y()), \"\\n\")   }) }  app <- shinyApp(ui, server) with(daemons(8), runApp(app))"},{"path":"https://mirai.r-lib.org/dev/articles/mirai-promises.html","id":"plumber-get-endpoint","dir":"Articles","previous_headings":"","what":"9. Plumber GET Endpoint","title":"Promises - Shiny and Plumber","text":"mirai may used asynchronous backend plumber pipelines. example, plumber router code run daemon process block current process - useful interactive sessions, otherwise just taking code within outer mirai() call suffice. /echo endpoint takes GET request, sleeps 1 second (simulating expensive computation) simply returns ‘msg’ request header together timestamp process ID process run . API can queried using async HTTP client nanonext::ncurl_aio(). , 8 requests submitted , note responses differing timestamps 4 can processed one time (limited number daemons set).","code":"library(mirai)  # supply SIGINT so the plumber server is interrupted and exits cleanly when finished daemons(1L, dispatcher = FALSE, autoexit = tools::SIGINT) #> [1] 1  m <- mirai({   library(plumber)   library(promises) # to provide the promise pipe   library(mirai)    # more efficient not to use dispatcher if all requests are similar length   daemons(4L, dispatcher = FALSE) # handles 4 requests simultaneously    pr() |>     pr_get(       \"/echo\",       function(req, res) {         mirai(           {             Sys.sleep(1L)             list(               status = 200L,               body = list(                 time = format(Sys.time()), msg = msg, pid = Sys.getpid()               )             )           },           msg = req[[\"HEADERS\"]][[\"msg\"]]         ) %...>% (function(x) {           res$status <- x$status           res$body <- x$body         })       }     ) |>     pr_run(host = \"127.0.0.1\", port = 8985) }) library(nanonext) res <- lapply(   1:8,   function(i) ncurl_aio(     \"http://127.0.0.1:8985/echo\",     headers = c(msg = as.character(i))   ) ) collect_aio(res) #> [[1]] #> [1] \"{\\\"time\\\":[\\\"2025-06-15 14:43:16\\\"],\\\"msg\\\":[\\\"1\\\"],\\\"pid\\\":[43765]}\" #>  #> [[2]] #> [1] \"{\\\"time\\\":[\\\"2025-06-15 14:43:17\\\"],\\\"msg\\\":[\\\"2\\\"],\\\"pid\\\":[43765]}\" #>  #> [[3]] #> [1] \"{\\\"time\\\":[\\\"2025-06-15 14:43:17\\\"],\\\"msg\\\":[\\\"3\\\"],\\\"pid\\\":[43763]}\" #>  #> [[4]] #> [1] \"{\\\"time\\\":[\\\"2025-06-15 14:43:16\\\"],\\\"msg\\\":[\\\"4\\\"],\\\"pid\\\":[43763]}\" #>  #> [[5]] #> [1] \"{\\\"time\\\":[\\\"2025-06-15 14:43:16\\\"],\\\"msg\\\":[\\\"5\\\"],\\\"pid\\\":[43768]}\" #>  #> [[6]] #> [1] \"{\\\"time\\\":[\\\"2025-06-15 14:43:17\\\"],\\\"msg\\\":[\\\"6\\\"],\\\"pid\\\":[43761]}\" #>  #> [[7]] #> [1] \"{\\\"time\\\":[\\\"2025-06-15 14:43:17\\\"],\\\"msg\\\":[\\\"7\\\"],\\\"pid\\\":[43768]}\" #>  #> [[8]] #> [1] \"{\\\"time\\\":[\\\"2025-06-15 14:43:16\\\"],\\\"msg\\\":[\\\"8\\\"],\\\"pid\\\":[43761]}\"  daemons(0) #> [1] 0"},{"path":"https://mirai.r-lib.org/dev/articles/mirai-promises.html","id":"plumber-post-endpoint","dir":"Articles","previous_headings":"","what":"10. Plumber POST Endpoint","title":"Promises - Shiny and Plumber","text":"equivalent using POST endpoint, accepting JSON instruction sent request data. Note req$postBody always accessed router process passed argument ‘mirai’, retrieved using connection serializable. Querying endpoint produces set outputs previous example.","code":"library(mirai)  # supply SIGINT so the plumber server is interrupted and exits cleanly when finished daemons(1L, dispatcher = FALSE, autoexit = tools::SIGINT) #> [1] 1  m <- mirai({   library(plumber)   library(promises) # to provide the promise pipe   library(mirai)    # uses dispatcher - suitable when requests take differing times to complete   daemons(4L) # handles 4 requests simultaneously    pr() |>     pr_post(       \"/echo\",       function(req, res) {         mirai(           {             Sys.sleep(1L) # simulate expensive computation             list(               status = 200L,               body = list(                 time = format(Sys.time()),                 msg = jsonlite::fromJSON(data)[[\"msg\"]],                 pid = Sys.getpid()               )             )           },           data = req$postBody         ) %...>% (function(x) {           res$status <- x$status           res$body <- x$body         })       }     ) |>     pr_run(host = \"127.0.0.1\", port = 8986) }) library(nanonext) res <- lapply(   1:8,   function(i) ncurl_aio(     \"http://127.0.0.1:8986/echo\",     method = \"POST\",     data = sprintf('{\"msg\":\"%d\"}', i)   ) ) collect_aio(res) #> [[1]] #> [1] \"{\\\"time\\\":[\\\"2025-06-15 14:43:21\\\"],\\\"msg\\\":[\\\"1\\\"],\\\"pid\\\":[44052]}\" #>  #> [[2]] #> [1] \"{\\\"time\\\":[\\\"2025-06-15 14:43:21\\\"],\\\"msg\\\":[\\\"2\\\"],\\\"pid\\\":[44044]}\" #>  #> [[3]] #> [1] \"{\\\"time\\\":[\\\"2025-06-15 14:43:21\\\"],\\\"msg\\\":[\\\"3\\\"],\\\"pid\\\":[44046]}\" #>  #> [[4]] #> [1] \"{\\\"time\\\":[\\\"2025-06-15 14:43:21\\\"],\\\"msg\\\":[\\\"4\\\"],\\\"pid\\\":[44048]}\" #>  #> [[5]] #> [1] \"{\\\"time\\\":[\\\"2025-06-15 14:43:22\\\"],\\\"msg\\\":[\\\"5\\\"],\\\"pid\\\":[44048]}\" #>  #> [[6]] #> [1] \"{\\\"time\\\":[\\\"2025-06-15 14:43:22\\\"],\\\"msg\\\":[\\\"6\\\"],\\\"pid\\\":[44044]}\" #>  #> [[7]] #> [1] \"{\\\"time\\\":[\\\"2025-06-15 14:43:22\\\"],\\\"msg\\\":[\\\"7\\\"],\\\"pid\\\":[44052]}\" #>  #> [[8]] #> [1] \"{\\\"time\\\":[\\\"2025-06-15 14:43:22\\\"],\\\"msg\\\":[\\\"8\\\"],\\\"pid\\\":[44046]}\"  daemons(0) #> [1] 0"},{"path":"https://mirai.r-lib.org/dev/articles/mirai-serialization.html","id":"serialization-arrow-polars-and-beyond","dir":"Articles","previous_headings":"","what":"1. Serialization: Arrow, polars and beyond","title":"Serialization - Arrow, ADBC, polars, torch","text":"Native R serialization used sending data host daemons. R objects nature serialized, accessed via external pointer. cases, performing ‘mirai’ operations normally error. Using arrow package example: However, serial_config() can used create custom serialization configurations, specifying functions hook R’s native serialization mechanism reference objects (‘refhooks’). configuration may passed ‘serial’ argument daemons() call. can seen time, arrow table seamlessly handled ‘mirai’ process. case even object deeply nested inside lists structures. Multiple serialization functions may registered handle different object classes. example, can use Arrow combination polars, ‘lightning fast’ dataframe library written Rust (requires polars >= 0.16.4), following way:","code":"library(mirai) library(arrow, warn.conflicts = FALSE) daemons(1) #> [1] 1 everywhere(library(arrow))  x <- as_arrow_table(iris)  m <- mirai(list(a = head(x), b = \"some text\"), x = x) m[] #> 'miraiError' chr Error: Invalid <Table>, external pointer to null  daemons(0) #> [1] 0 cfg <- serial_config(   \"ArrowTabular\",   arrow::write_to_raw,   function(x) arrow::read_ipc_stream(x, as_data_frame = FALSE) )  daemons(1, serial = cfg) #> [1] 1  everywhere(library(arrow))  m <- mirai(list(a = head(x), b = \"some text\"), x = x) m[] #> $a #> Table #> 6 rows x 5 columns #> $Sepal.Length <double> #> $Sepal.Width <double> #> $Petal.Length <double> #> $Petal.Width <double> #> $Species <dictionary<values=string, indices=int8>> #>  #> See $metadata for additional Schema metadata #>  #> $b #> [1] \"some text\"  daemons(0) #> [1] 0 daemons(   n = 1,   serial = serial_config(     c(\"ArrowTabular\", \"RPolarsDataFrame\"),     list(arrow::write_to_raw, function(x) polars::as_polars_df(x)$to_raw_ipc()),     list(function(x) arrow::read_ipc_stream(x, as_data_frame = FALSE), polars::pl$read_ipc)   ) ) #> [1] 1  x <- polars::as_polars_df(iris)  m <- mirai(list(a = head(x), b = \"some text\"), x = x) m[] #> $a #> shape: (6, 5) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬─────────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---     │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat     │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪═════════╡ #> │ 5.1          ┆ 3.5         ┆ 1.4          ┆ 0.2         ┆ setosa  │ #> │ 4.9          ┆ 3.0         ┆ 1.4          ┆ 0.2         ┆ setosa  │ #> │ 4.7          ┆ 3.2         ┆ 1.3          ┆ 0.2         ┆ setosa  │ #> │ 4.6          ┆ 3.1         ┆ 1.5          ┆ 0.2         ┆ setosa  │ #> │ 5.0          ┆ 3.6         ┆ 1.4          ┆ 0.2         ┆ setosa  │ #> │ 5.4          ┆ 3.9         ┆ 1.7          ┆ 0.4         ┆ setosa  │ #> └──────────────┴─────────────┴──────────────┴─────────────┴─────────┘ #>  #> $b #> [1] \"some text\"  daemons(0) #> [1] 0"},{"path":"https://mirai.r-lib.org/dev/articles/mirai-serialization.html","id":"serialization-torch","dir":"Articles","previous_headings":"","what":"2. Serialization: Torch","title":"Serialization - Arrow, ADBC, polars, torch","text":"Tensors torch package may used seamlessly ‘mirai’ computations. Setup Steps: Create serialization configuration, specifying ‘class’ ‘torch_tensor’. Set daemons, supplying configuration ‘serial’ argument. (Optional) Use everywhere() make torch package available daemons convenience. Example Usage: example creates convolutional neural network using torch::nn_module(). set model parameters also specified. model specification parameters passed initialized within ‘mirai’. returned model object containing many tensor elements. usual model parameters passed optimiser. can also initialized within ‘mirai’ process. , tensors complex objects containing tensors passed seamlessly host daemon processes, way R object. custom serialization mirai leverages R’s native ‘refhook’ mechanism allow completely transparent usage. Designed fast efficient, data copies minimised ‘official’ serialization methods torch package used directly.","code":"library(mirai) library(torch)  cfg <- serial_config(   class = \"torch_tensor\",   sfunc = torch::torch_serialize,   ufunc = torch::torch_load )  daemons(1, serial = cfg) #> [1] 1  everywhere(library(torch)) model <- nn_module(   initialize = function(in_size, out_size) {     self$conv1 <- nn_conv2d(in_size, out_size, 5)     self$conv2 <- nn_conv2d(in_size, out_size, 5)   },   forward = function(x) {     x <- self$conv1(x)     x <- nnf_relu(x)     x <- self$conv2(x)     x <- nnf_relu(x)     x   } )  params <- list(in_size = 1, out_size = 20)  m <- mirai(do.call(model, params), model = model, params = params)  m[] #> An `nn_module` containing 1,040 parameters. #>  #> ── Modules ─────────────────────────────────────────────────────────────────────────────────────────────────────── #> • conv1: <nn_conv2d> #520 parameters #> • conv2: <nn_conv2d> #520 parameters m$data$parameters$conv1.weight #> torch_tensor #> (1,1,.,.) =  #>  -0.0262 -0.1370 -0.1693  0.0484 -0.0838 #>   0.1652 -0.1055 -0.0515  0.0333 -0.0382 #>   0.1080 -0.1177  0.1167 -0.0461 -0.1962 #>   0.1142  0.1662 -0.0360  0.1436 -0.0409 #>   0.0353 -0.0687  0.0981  0.1394 -0.0842 #>  #> (2,1,.,.) =  #>   0.0630 -0.0416  0.1869  0.1926  0.0302 #>  -0.0431  0.1468  0.0099 -0.1621  0.0113 #>  -0.1834  0.0020  0.1224 -0.0567  0.1296 #>  -0.1861 -0.0603  0.1176  0.1747 -0.0717 #>  -0.1867 -0.1877  0.0247  0.1347 -0.0701 #>  #> (3,1,.,.) =  #>  -0.0746 -0.0194  0.1462  0.1338  0.0612 #>   0.0342 -0.1920 -0.0012 -0.0353  0.0906 #>   0.1996  0.1680 -0.1480  0.0512 -0.0664 #>  -0.1251 -0.1893 -0.0134  0.1526  0.0733 #>   0.0790  0.0142  0.1644  0.1460  0.1198 #>  #> (4,1,.,.) =  #>  -0.0769  0.1053 -0.0048 -0.1425  0.1471 #>  -0.1088 -0.0617 -0.0393 -0.0946 -0.1149 #>   0.0954  0.1848  0.1141  0.1125 -0.0753 #>  -0.1572  0.1532  0.1913  0.1790  0.0191 #>  -0.0573  0.0595  0.1499  0.0200 -0.0003 #>  #> (5,1,.,.) =  #>   0.0415 -0.0096  0.1445 -0.0812  0.1485 #> ... [the output was truncated (use n=-1 to disable)] #> [ CPUFloatType{20,1,5,5} ][ requires_grad = TRUE ] optim <- mirai(optim_rmsprop(params = params), params = m$data$parameters)  optim[] #> <optim_rmsprop> #>   Inherits from: <torch_optimizer> #>   Public: #>     add_param_group: function (param_group)  #>     clone: function (deep = FALSE)  #>     defaults: list #>     initialize: function (params, lr = 0.01, alpha = 0.99, eps = 1e-08, weight_decay = 0,  #>     load_state_dict: function (state_dict, ..., .refer_to_state_dict = FALSE)  #>     param_groups: list #>     state: State, R6 #>     state_dict: function ()  #>     step: function (closure = NULL)  #>     zero_grad: function (set_to_none = FALSE)  #>   Private: #>     deep_clone: function (name, value)  #>     step_helper: function (closure, loop_fun)  daemons(0) #> [1] 0"},{"path":"https://mirai.r-lib.org/dev/articles/mirai-serialization.html","id":"database-hosting-using-arrow-database-connectivity","dir":"Articles","previous_headings":"","what":"3. Database Hosting using Arrow Database Connectivity","title":"Serialization - Arrow, ADBC, polars, torch","text":"possible using DBI interface access manipulate data Apache Arrow data format efficiently ABDC (Arrow Database Connectivity). example creates -memory SQLite connection using adbcsqlite backend. Serialization set relevant serialization functions arrow package part daemons() call. Note specified class ‘nanoarrow_array_stream’ nanoarrow backend queries made DBI db*Arrow() functions. mirai() calls may used write query database Arrow format. Due tight integration mirai serialization mechanism R’s ‘refhook’ system, can easily return complex / nested objects containing multiple queries Arrow format: , everywhere() can used cleanly tear databases, resetting daemons.","code":"library(mirai)  cfg <- serial_config(   class = \"nanoarrow_array_stream\",   sfunc = arrow::write_to_raw,   ufunc = function(x) arrow::read_ipc_stream(x, as_data_frame = FALSE) )  daemons(1, serial = cfg) #> [1] 1  everywhere(   {     library(DBI) # `adbi` and `adbcsqlite` packages must also be installed     con <<- dbConnect(adbi::adbi(\"adbcsqlite\"), uri = \":memory:\")   } ) m <- mirai(dbWriteTableArrow(con, \"iris\", iris)) m[] #> [1] TRUE m <- mirai(dbReadTableArrow(con, \"iris\")) m[] #> Table #> 150 rows x 5 columns #> $Sepal.Length <double> #> $Sepal.Width <double> #> $Petal.Length <double> #> $Petal.Width <double> #> $Species <string> m <- mirai(dbGetQueryArrow(con, 'SELECT * FROM iris WHERE \"Sepal.Length\" < 4.6')) m[] #> Table #> 5 rows x 5 columns #> $Sepal.Length <double> #> $Sepal.Width <double> #> $Petal.Length <double> #> $Petal.Width <double> #> $Species <string> m <- mirai({   a <- dbGetQueryArrow(con, 'SELECT * FROM iris WHERE \"Sepal.Length\" < 4.6')   b <- dbGetQueryArrow(con, 'SELECT * FROM iris WHERE \"Sepal.Width\" < 2.6')   x <- dbGetQueryArrow(con, 'SELECT * FROM iris WHERE \"Petal.Length\" < 1.5')   y <- dbGetQueryArrow(con, 'SELECT * FROM iris WHERE \"Petal.Width\" < 0.2')   list(sepal = list(length = a, width = b), petal = list(length = x, width = y)) }) m[] #> $sepal #> $sepal$length #> Table #> 5 rows x 5 columns #> $Sepal.Length <double> #> $Sepal.Width <double> #> $Petal.Length <double> #> $Petal.Width <double> #> $Species <string> #>  #> $sepal$width #> Table #> 19 rows x 5 columns #> $Sepal.Length <double> #> $Sepal.Width <double> #> $Petal.Length <double> #> $Petal.Width <double> #> $Species <string> #>  #>  #> $petal #> $petal$length #> Table #> 24 rows x 5 columns #> $Sepal.Length <double> #> $Sepal.Width <double> #> $Petal.Length <double> #> $Petal.Width <double> #> $Species <string> #>  #> $petal$width #> Table #> 5 rows x 5 columns #> $Sepal.Length <double> #> $Sepal.Width <double> #> $Petal.Length <double> #> $Petal.Width <double> #> $Species <string> everywhere(dbDisconnect(con)) daemons(0) #> [1] 0"},{"path":"https://mirai.r-lib.org/dev/articles/mirai-serialization.html","id":"shiny-mirai-dbi-adbc-integrated-example","dir":"Articles","previous_headings":"","what":"4. Shiny / mirai / DBI / ADBC Integrated Example","title":"Serialization - Arrow, ADBC, polars, torch","text":"following example database connections hosted mirai daemons may used power Shiny app. one-time serialization() setup ensures seamless transport Apache Arrow data, occurs global environment outside server(). new database connection created new daemon process every new Shiny session. resources freed sesssion ends. logic defined within server(). unique ID used identify session, specified ‘compute profile’ daemons. Non-dispatcher daemons created scheduling required (queries expected take roughly time, case session uses one daemon anyway). Shiny ExtendedTask used perform query via mirai() call, using session-specific compute profile.","code":"library(mirai) library(secretbase) library(shiny) library(bslib)  # create an Arrow serialization configuration cfg <- serial_config(   class = \"nanoarrow_array_stream\",   sfunc = arrow::write_to_raw,   ufunc = nanoarrow::read_nanoarrow )  # write 'iris' dataset to temp database file (for this demonstration) file <- tempfile() con <- DBI::dbConnect(adbi::adbi(\"adbcsqlite\"), uri = file) DBI::dbWriteTableArrow(con, \"iris\", iris) DBI::dbDisconnect(con)  # common input parameters slmin <- min(iris$Sepal.Length) slmax <- max(iris$Sepal.Length)  ui <- page_fluid(   p(\"The time is \", textOutput(\"current_time\", inline = TRUE)),   hr(),   h3(\"Shiny / mirai / DBI / ADBC demonstration\"),   p(\"New daemon-hosted database connection is created for every Shiny session\"),   sliderInput(     \"sl\", \"Query iris dataset based on Sepal Length\", min = slmin, max = slmax,     value = c(slmin, slmax), width = \"75%\"   ),   input_task_button(\"btn\", \"Return query\"),   tableOutput(\"table\") )  # uses Shiny ExtendedTask with mirai server <- function(input, output, session) {    # create unique session id by hashing current time with a random key   id <- secretbase::siphash13(Sys.time(), key = nanonext::random(4L))    # create new daemon for each session   daemons(1L, serial = cfg, .compute = id)    # tear down daemon when session ends   session$onEnded(function() daemons(0L, .compute = id))    # everywhere() loads DBI and creates ADBC connection in each daemon   # and sets up serialization   everywhere(     {       library(DBI) # `adbi` and `adbcsqlite` packages must also be installed       con <<- dbConnect(adbi::adbi(\"adbcsqlite\"), uri = file)     },     file = file,     .compute = id   )    output$current_time <- renderText({     invalidateLater(1000)     format(Sys.time(), \"%H:%M:%S %p\")   })    task <- ExtendedTask$new(     function(...) mirai(       dbGetQueryArrow(         con,         sprintf(           \"SELECT * FROM iris WHERE \\\"Sepal.Length\\\" BETWEEN %.2f AND %.2f\",           sl[1L],           sl[2L]         )       ),       ...,       .compute = id     )   ) |> bind_task_button(\"btn\")    observeEvent(input$btn, task$invoke(sl = input$sl))    output$table <- renderTable(task$result())  }  # run Shiny app shinyApp(ui = ui, server = server)  # deletes temp database file (for this demonstration) unlink(file)"},{"path":"https://mirai.r-lib.org/dev/articles/mirai-xparallel.html","id":"mirai-parallel-clusters","dir":"Articles","previous_headings":"","what":"1. Mirai Parallel Clusters","title":"Communications Backend for R","text":"mirai provides alternative communications backend R. functionality developed fulfil request R Core R Project Sprint 2023. ‘miraiCluster’ recognised one official cluster types R 4.5, may created parallel::makeCluster(type = \"MIRAI\"). function calls make_cluster(), may also used create ‘miraiCluster’ directly. Specify ‘n’ launch nodes local machine. Specify ‘url’ receiving connections remote nodes. Optionally, specify ‘remote’ launch remote daemons using remote configuration generated remote_config() ssh_config(). Created clusters may used function parallel base package parallel::clusterApply() parallel::parLapply(), load-balanced versions parallel::parLapplyLB(). status() may called ’miraiCluster` query number connected nodes time. Making cluster specifying ‘url’ without ‘remote’ causes shell commands manual deployment nodes printed console.","code":"library(parallel) library(mirai)  cl <- makeCluster(6, type = \"MIRAI\") cl #> < miraiCluster | ID: `26` nodes: 6 active: TRUE > parLapply(cl, iris, mean) #> $Sepal.Length #> [1] 5.843333 #>  #> $Sepal.Width #> [1] 3.057333 #>  #> $Petal.Length #> [1] 3.758 #>  #> $Petal.Width #> [1] 1.199333 #>  #> $Species #> [1] NA status(cl) #> $connections #> [1] 6 #>  #> $daemons #> [1] \"abstract://eb809f13097f9a03ba5cb5bb\" stopCluster(cl) cl <- make_cluster(n = 2, url = host_url()) #> Shell commands for deployment on nodes: #>  #> [1] #> Rscript -e 'mirai::daemon(\"tcp://192.168.1.71:45111\",dispatcher=FALSE,cleanup=FALSE,rs=c(10407,2115398811,-2011965664,-789584735,1666662894,1025958295,-751939348))' #>  #> [2] #> Rscript -e 'mirai::daemon(\"tcp://192.168.1.71:45111\",dispatcher=FALSE,cleanup=FALSE,rs=c(10407,1495377764,161492535,-451945023,2093847167,-1105055737,1737365375))' stop_cluster(cl)"},{"path":"https://mirai.r-lib.org/dev/articles/mirai-xparallel.html","id":"foreach-support","dir":"Articles","previous_headings":"","what":"2. Foreach Support","title":"Communications Backend for R","text":"‘miraiCluster’ may also registered doParallel use foreach package. Running parallel examples foreach() function:","code":"library(doParallel) library(foreach)  cl <- makeCluster(6, type = \"MIRAI\") registerDoParallel(cl)  # normalize the rows of a matrix m <- matrix(rnorm(9), 3, 3) foreach(i = 1:nrow(m), .combine = rbind) %dopar%   (m[i, ] / mean(m[i, ])) #>              [,1]       [,2]       [,3] #> result.1 5.989529  1.1456413 -4.1351703 #> result.2 3.745199 -0.5989935 -0.1462058 #> result.3 3.007812  2.0183943 -2.0262067  # simple parallel matrix multiply a <- matrix(1:16, 4, 4) b <- t(a) foreach(b = iterators::iter(b, by='col'), .combine = cbind) %dopar%   (a %*% b) #>      [,1] [,2] [,3] [,4] #> [1,]  276  304  332  360 #> [2,]  304  336  368  400 #> [3,]  332  368  404  440 #> [4,]  360  400  440  480  stopCluster(cl)"},{"path":"https://mirai.r-lib.org/dev/articles/mirai.html","id":"table-of-contents","dir":"Articles","previous_headings":"","what":"Table of Contents","title":"mirai - Minimalist Async Evaluation Framework for R","text":"Example 1: Compute-intensive Operations Example 2: /O-bound Operations Example 3: Resilient Pipelines","code":""},{"path":"https://mirai.r-lib.org/dev/articles/mirai.html","id":"example-1-compute-intensive-operations","dir":"Articles","previous_headings":"","what":"Example 1: Compute-intensive Operations","title":"mirai - Minimalist Async Evaluation Framework for R","text":"Use case: minimise execution times performing long-running tasks concurrently separate processes. Multiple long computes (model fits etc.) can performed parallel available computing cores. Use mirai() evaluate expression asynchronously separate, clean R process. following mimics expensive calculation eventually returns random value. mirai expression evaluated another process hence must self-contained, referring variables already exist . , variables time mean passed part mirai() call. ‘mirai’ object returned immediately - creating mirai never blocks session. Whilst async operation ongoing, attempting access mirai’s data yields ‘unresolved’ logical NA. check whether mirai remains unresolved (yet complete): wait collect return value, use collect_mirai() equivalently mirai’s [] method: mirai represents async operation, never necessary wait - code can continue run. completes, return value automatically becomes available $data. easy programmatic use mirai(), ‘.expr’ accepts pre-constructed language object, also list named arguments passed via ‘.args’. , following equivalent : « Back ToC","code":"library(mirai)  args <- list(time = 2L, mean = 4)  m <- mirai(   {     Sys.sleep(time)     rnorm(5L, mean)   },   time = args$time,   mean = args$mean ) m #> < mirai [] > m$data #> 'unresolved' logi NA unresolved(m) #> [1] TRUE collect_mirai(m) #> [1] 3.015379 4.302305 3.944091 4.288177 3.504224 m[] #> [1] 3.015379 4.302305 3.944091 4.288177 3.504224 m #> < mirai [$data] > m$data #> [1] 3.015379 4.302305 3.944091 4.288177 3.504224 expr <- quote({Sys.sleep(time); rnorm(5L, mean)})  m <- mirai(.expr = expr, .args = args) m[] #> [1] 4.000838 5.240298 3.555610 2.854485 2.921133"},{"path":"https://mirai.r-lib.org/dev/articles/mirai.html","id":"example-2-io-bound-operations","dir":"Articles","previous_headings":"","what":"Example 2: I/O-bound Operations","title":"mirai - Minimalist Async Evaluation Framework for R","text":"Use case: ensure execution flow main process blocked. High-frequency real-time data written file/database synchronously without disrupting execution flow. Cache data memory use mirai() perform periodic write operations concurrently separate process. , ‘.args’ used pass environment(), calling environment. provides convenient method passing existing objects. ‘mirai’ object returned immediately. unresolved() may used control flow statements perform actions depend resolution ‘mirai’, . means need actually wait (block) ‘mirai’ resolve, example demonstrates. Now actions depend resolution may processed, example next write. « Back ToC","code":"library(mirai)  x <- rnorm(1e6) file <- tempfile()  m <- mirai(write.csv(x, file = file), .args = environment()) while (unresolved(m)) {   cat(\"while unresolved\\n\")   Sys.sleep(0.5) } #> while unresolved #> while unresolved  cat(\"Write complete:\", is.null(m$data)) #> Write complete: TRUE"},{"path":"https://mirai.r-lib.org/dev/articles/mirai.html","id":"example-3-resilient-pipelines","dir":"Articles","previous_headings":"","what":"Example 3: Resilient Pipelines","title":"mirai - Minimalist Async Evaluation Framework for R","text":"Use case: isolating code can potentially fail separate process ensure continued uptime. part data science / machine learning pipeline, iterations model training may periodically fail stochastic uncontrollable reasons (e.g. buggy memory management graphics cards). Running iteration ‘mirai’ isolates potentially-problematic code bring entire pipeline, even fails. , testing return value ‘mirai’ errors, error-handling code able automate recovery re-attempts, example. end result resilient fault-tolerant pipeline minimises downtime eliminating interruptions long computes.","code":"library(mirai)  run_iteration <- function(i) {    # simulates a stochastic error rate   if (runif(1) < 0.1) stop(\"random error\\n\", call. = FALSE)   sprintf(\"iteration %d successful\\n\", i)  }  for (i in 1:10) {    m <- mirai(run_iteration(i), environment())   while (is_error_value(m[])) {     cat(m$data)     m <- mirai(run_iteration(i), environment())   }   cat(m$data)  } #> iteration 1 successful #> iteration 2 successful #> iteration 3 successful #> iteration 4 successful #> Error: random error #> iteration 5 successful #> iteration 6 successful #> Error: random error #> iteration 7 successful #> iteration 8 successful #> iteration 9 successful #> iteration 10 successful"},{"path":"https://mirai.r-lib.org/dev/articles/mirai.html","id":"further-details-on-error-handling","dir":"Articles","previous_headings":"Example 3: Resilient Pipelines","what":"Further details on error handling","title":"mirai - Minimalist Async Evaluation Framework for R","text":"execution mirai fails, error message returned character string class ‘miraiError’ ‘errorValue’ facilitate debugging. is_mirai_error() may used test mirai execution errors. full stack trace evaluation within mirai recorded accessible $stack.trace error object. Elements original error condition also accessible via $ error object. example, additional metadata recorded rlang::abort() preserved: daemon instance sent user interrupt, mirai resolve object class ‘miraiInterrupt’ ‘errorValue’. is_mirai_interrupt() may used test interrupts. execution mirai surpasses timeout set via ‘.timeout’ argument, mirai resolve ‘errorValue’ 5L (timed ). can, amongst things, guard mirai processes potential hang never return. is_error_value() tests mirai execution errors, user interrupts timeouts. « Back ToC","code":"m1 <- mirai(stop(\"occurred with a custom message\", call. = FALSE)) m1[] #> 'miraiError' chr Error: occurred with a custom message  m2 <- mirai(mirai::mirai()) m2[] #> 'miraiError' chr Error in mirai::mirai(): missing expression, perhaps wrap in {}?  is_mirai_error(m2$data) #> [1] TRUE is_error_value(m2$data) #> [1] TRUE f <- function(x) if (x > 0) stop(\"positive\")  m3 <- mirai({f(-1); f(1)}, f = f) m3[] #> 'miraiError' chr Error in f(1): positive  m3$data$stack.trace #> [[1]] #> stop(\"positive\") #>  #> [[2]] #> f(1) f <- function(x) if (x > 0) stop(\"positive\")  m4 <- mirai(rlang::abort(\"aborted\", meta_uid = \"UID001\")) m4[] #> 'miraiError' chr Error: aborted  m4$data$meta_uid #> [1] \"UID001\" m4 <- mirai(rlang::interrupt()) # simulates a user interrupt is_mirai_interrupt(m4[]) #> [1] TRUE m5 <- mirai(nanonext::msleep(1000), .timeout = 500) m5[] #> 'errorValue' int 5 | Timed out  is_mirai_error(m5$data) #> [1] FALSE is_mirai_interrupt(m5$data) #> [1] FALSE is_error_value(m5$data) #> [1] TRUE"},{"path":"https://mirai.r-lib.org/dev/articles/packages.html","id":"developer-interfaces","dir":"Articles","previous_headings":"","what":"1. Developer Interfaces","title":"For Package Authors","text":"mirai offers following functions primarily package authors using mirai: require_daemons() error prompt user set daemons (clickable function link cli package available) daemons already set. daemons_set(), detect daemons already set prompt user set daemons . on_daemon(), detect code already running daemon, .e. within mirai() call. register_serial() register custom serialization functions, automatically available default subsequent daemons() calls. nextget(), querying values compute profile, ‘url’, described function’s documentation. Note: specifically-documented values supported interfaces.","code":""},{"path":"https://mirai.r-lib.org/dev/articles/packages.html","id":"guidance","dir":"Articles","previous_headings":"","what":"2. Guidance","title":"For Package Authors","text":"mirai framework designed support completely transparent inter-operable use within packages. core design precept relying global options environment variables minimises likelihood conflict use different packages. hence important points note: daemons() settings wherever possible left end-users. means package author, just consider mirai run whatever resources available user time code run. need anticipate whether end-user run code machine, distributed network, mixture . Consider pointing documentation mirai::daemons(), re-exporting daemons() package convenience. Never include call daemons() using mirai_map(). important ensure accidental recursive creation daemons machine, example function used within another package’s function also uses mirai. Exceptionally, including daemons() call may appropriate async operations using single dedicated non-dispatcher daemon. representative example usage pattern logger::appender_async(), logger package’s ‘namespace’ concept maps directly mirai’s ‘compute profile’. shape contents status() call must used programatically, user interface subject change time. Use nextget() instead. functions unresolved(), is_error_value(), is_mirai_error(), is_mirai_interrupt() used test relevant state mirai value. characteristics current implementation, e.g. logical NA ‘unresolvedValue’, relied upon, subject change time. Testing CRAN respect ’s 2-core usage limit. limits apply tests CRAN, complex tests may run elsewhere. practically means limiting tests using one daemon (dispatcher = FALSE) ensure one additional process used. Always reset daemons done allow least one-second sleep ensure background processes properly exited.","code":""},{"path":"https://mirai.r-lib.org/dev/articles/questions.html","id":"migration-from-future_promise","dir":"Articles","previous_headings":"","what":"1. Migration from future_promise()","title":"Community FAQs","text":"use within Shiny, straightforward translating ExtendedTask async code originally written use promises::future_promise(). Note: future_promise() exists promises package find workaround make future(...) always async. future(...) always async blocks soon runs parallel processes run tasks. mirai() hand built async framework, ’s need additional function promises package. simply use mirai() directly place future_promise(). Globals: One important difference future_promise() default tries infer global variables required expression. code depended convenience feature need instead pass via ... mirai(). mirai requires expression self-contained, variables helper functions explicitly supplied . hand, code previously used globals argument supply variables, can often pass directly .args mirai(). Note work case named list forms globals can take. Regardless using mirai() future_promise(), recommend pass globals explicitly production code. globals detection never 100% perfect, always element guesswork. Edge cases can lead unpredictable failures silently incorrect results. Explicit passing variables allows transparent reliable behaviour, remains completely robust time. Capture globals using environment(): mirai() allows passing environment ... .args. especially useful Shiny ExtendedTask, invoked set arguments. using mirai::mirai({...}, environment()) automatically capture variables provided invoke method. See Shiny vignette example usage. Special Case: ...: Shiny app may use following future_promise() code within server component: equivalent mirai() achieved : Note environment() captures ... ’s used within mirai expression.","code":"func <- function(x, y){   Sys.sleep(y)   runif(x) }  task <- ExtendedTask$new(   function(...) future_promise(func(...)) ) |> bind_task_button(\"btn\")  observeEvent(input$btn, task$invoke(input$n, input$delay)) task <- ExtendedTask$new(   function(...) mirai(func(...), func = func, .args = environment()) ) |> bind_task_button(\"btn\")"},{"path":"https://mirai.r-lib.org/dev/articles/questions.html","id":"setting-the-random-seed","dir":"Articles","previous_headings":"","what":"2. Setting the random seed","title":"Community FAQs","text":"following example raised potentially counter-intuitive, given default ‘cleanup’ settings daemon ensures variables global environment, .Random.seed one, carry subsequent runs. reason change random seed persists circumstances due special case, arising use L’Ecuyer CMRG streams provide parallel-safe random numbers. Streams can thought entry points psuedo random number line far away ensure random results daemon independent one another. random seed reset mirai call ensure however many random draws made mirai call, next random draw follows stream, hence desired statistical properties. Hence normally, random seed set host process daemons created, rather daemon. required set seed daemon, done using independent method set time random draws required. Another option set random seed within local execution scope prevent global random seed daemon affected.","code":"library(mirai) daemons(4) #> [1] 4  vec <- 1:3 vec2 <- 4:6  # Returns different values: good mirai_map(list(vec, vec2), \\(x) rnorm(x))[] #> [[1]] #> [1]  0.3339189 -0.6827722 -0.3222064 #>  #> [[2]] #> [1] -0.4858116  0.2750812 -0.1216267  # Set the seed in the function mirai_map(list(vec, vec2), \\(x) {   set.seed(123)   rnorm(x) })[] #> [[1]] #> [1] -0.9685927  0.7061091  1.4890213 #>  #> [[2]] #> [1] -0.9685927  0.7061091  1.4890213  # Do not set the seed in the function: still identical results? mirai_map(list(vec, vec2), \\(x) rnorm(x))[] #> [[1]] #> [1] -1.8150926  0.3304096 -1.1421557 #>  #> [[2]] #> [1] -1.8150926  0.3304096 -1.1421557  daemons(0) #> [1] 0"},{"path":"https://mirai.r-lib.org/dev/articles/questions.html","id":"accessing-package-functions-during-development","dir":"Articles","previous_headings":"","what":"3. Accessing package functions during development","title":"Community FAQs","text":"mirai call usually requires package-namespaced functions. However latest version package development often loaded dynamically devtools::load_all() underlying pkgload::load_all() quick iteration. case, use everywhere() also call devtools::load_all() (local) daemons. access functions host session subsequent mirai() calls.","code":""},{"path":"https://mirai.r-lib.org/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Charlie Gao. Author, maintainer. Joe Cheng. Contributor. . Copyright holder, funder. Hibiki AI Limited. Copyright holder.","code":""},{"path":"https://mirai.r-lib.org/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Gao C (2025). mirai: Minimalist Async Evaluation Framework R. R package version 2.3.0.9001, https://doi.org/10.5281/zenodo.7912722.","code":"@Manual{,   title = {mirai: Minimalist Async Evaluation Framework for R},   author = {Charlie Gao},   year = {2025},   note = {R package version 2.3.0.9001},   url = {https://doi.org/10.5281/zenodo.7912722}, }"},{"path":[]},{"path":"https://mirai.r-lib.org/dev/index.html","id":"ミライ","dir":"","previous_headings":"","what":"ミライ","title":"Minimalist Async Evaluation Framework for R","text":"みらい 未来  Minimalist Async Evaluation Framework R  → Designed simplicity, ‘mirai’ evaluates R expression asynchronously parallel process, locally distributed network. → Modern networking concurrency, built nanonext NNG (Nanomsg Next Gen), ensures reliable efficient scheduling fast inter-process communications TCP/IP secured TLS. Distributed computing can launch remote resources via SSH cluster managers. → queued architecture readily handles tasks available processes, requiring storage file system. Innovative features include event-driven promises, asynchronous parallel map, automatic serialization otherwise non-exportable reference objects.","code":""},{"path":"https://mirai.r-lib.org/dev/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick Start","title":"Minimalist Async Evaluation Framework for R","text":"Use mirai() evaluate expression asynchronously separate, clean R process. following mimics expensive calculation eventually returns vector random values. mirai expression evaluated another process hence must self-contained, referring variables already exist . , variables n mean passed part mirai() call. ‘mirai’ object returned immediately, always non-blocking. wait collect return value, use mirai’s [] method. mirai represents async operation, never necessary wait . completes, return value automatically available $data.","code":"library(mirai)  m <- mirai(   {     Sys.sleep(n)     rnorm(n, mean)   },   n = 3L,   mean = 7 ) m #> < mirai [] >  # Whilst async operation still ongoing: m$data #> 'unresolved' logi NA unresolved(m) #> [1] TRUE m[] #> [1] 7.147735 7.442937 6.165155 while (unresolved(m)) {   # Do other work } m$data #> [1] 7.147735 7.442937 6.165155"},{"path":"https://mirai.r-lib.org/dev/index.html","id":"daemons","dir":"","previous_headings":"Quick Start","what":"Daemons","title":"Minimalist Async Evaluation Framework for R","text":"📡️️ Daemons persistent background processes receiving mirai requests, created easily : Daemons may also deployed remotely distributed computing network. 🛰️️ Launchers can start daemons via (tunnelled) SSH cluster resource manager. 🔐 Secure TLS connections can used remote daemon connections, zero configuration required.","code":"daemons(6) #> [1] 6"},{"path":"https://mirai.r-lib.org/dev/index.html","id":"async-parallel-map","dir":"","previous_headings":"Quick Start","what":"Async Parallel Map","title":"Minimalist Async Evaluation Framework for R","text":"mirai_map() maps function list vector, element processed separate parallel process. dataframe matrix, automatically performs multiple map rows. ‘mirai_map’ object returned immediately, always non-blocking. value may retrieved time using [] method, returning list just like purrr::map(). [] method also provides options flatmap, early stopping /progress indicators. errors returned ‘errorValues’, facilitating recovery partial failure. advantages alternative map implementations.","code":"df <- data.frame(   fruit = c(\"melon\", \"grapes\", \"coconut\"),   price = c(3L, 5L, 2L) ) m <- mirai_map(   df,   \\(...) sprintf(\"%s: $%d\", ...) ) m #> < mirai map [3/3] > m[.flat] #> [1] \"melon: $3\"   \"grapes: $5\"  \"coconut: $2\""},{"path":"https://mirai.r-lib.org/dev/index.html","id":"design-concepts","dir":"","previous_headings":"","what":"Design Concepts","title":"Minimalist Async Evaluation Framework for R","text":"mirai designed ground provide production-grade experience. → Fast 1,000x responsive vs. common alternatives [1] Built low-latency applications e.g. real time inference & Shiny apps → Reliable reliance global options variables consistent behaviour Explicit evaluation transparent predictable results → Scalable Launch millions tasks thousands connections Proven track record heavy-duty workloads life sciences industry  ","code":""},{"path":"https://mirai.r-lib.org/dev/index.html","id":"powering-the-ecosystem","dir":"","previous_headings":"","what":"Powering the Ecosystem","title":"Minimalist Async Evaluation Framework for R","text":"mirai features following core integrations, usage examples linked vignettes:   Provides first official alternative communications backend R, implementing new parallel cluster type, feature request R-Core R Project Sprint 2023.   Powers (development) implementation parallel map purrr functional programming toolkit, one core tidyverse packages.   Implements next generation completely event-driven promises. ‘mirai’ ‘mirai_map’ objects may used interchangeably ‘promises’, including promise pipe %...>%.   Asynchronous parallel / distributed backend, supporting next level responsiveness scalability within Shiny, native support ExtendedTask.   Asynchronous parallel / distributed backend scaling Plumber applications production.   Allows Torch tensors complex objects models optimizers used seamlessly across parallel processes.   Allows queries using Apache Arrow format handled seamlessly ADBC database connections hosted background processes.   Targets, make-like pipeline tool, adopted crew default high-performance computing backend. Crew distributed worker-launcher extending mirai different distributed computing platforms, traditional clusters including LFS, PBS/TORQUE, SGE Slurm cloud services AWS Batch.","code":""},{"path":"https://mirai.r-lib.org/dev/index.html","id":"thanks","dir":"","previous_headings":"","what":"Thanks","title":"Minimalist Async Evaluation Framework for R","text":"like thank particular: Landau instrumental shaping development package, initiating original request persistent daemons, orchestrating robustness testing high performance computing requirements crew targets. Joe Cheng integrating ‘promises’ method work seamlessly within Shiny, prototyping event-driven promises. Luke Tierney R Core, discussion L’Ecuyer-CMRG streams ensure statistical independence parallel processing, making possible mirai first ‘alternative communications backend R’. Travers Ching novel idea extending original custom serialization support package. Henrik Bengtsson valuable insights leading interface accepting broader usage patterns. Daniel Falbel discussion around efficient solution serialization transmission torch tensors. Kirill Müller discussion using parallel processes host Arrow database connections.","code":""},{"path":"https://mirai.r-lib.org/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Minimalist Async Evaluation Framework for R","text":"Install latest release CRAN: current development version available R-universe:","code":"install.packages(\"mirai\") install.packages(\"mirai\", repos = \"https://r-lib.r-universe.dev\")"},{"path":"https://mirai.r-lib.org/dev/index.html","id":"links--references","dir":"","previous_headings":"","what":"Links & References","title":"Minimalist Async Evaluation Framework for R","text":"◈ mirai R package: https://mirai.r-lib.org/  ◈ nanonext R package: https://nanonext.r-lib.org/ mirai listed CRAN High Performance Computing Task View: https://cran.r-project.org/view=HighPerformanceComputing – Please note project released Contributor Code Conduct. participating project agree abide terms.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/as.promise.mirai.html","id":null,"dir":"Reference","previous_headings":"","what":"Make mirai Promise — as.promise.mirai","title":"Make mirai Promise — as.promise.mirai","text":"Creates 'promise' 'mirai'.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/as.promise.mirai.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make mirai Promise — as.promise.mirai","text":"","code":"# S3 method for class 'mirai' as.promise(x)"},{"path":"https://mirai.r-lib.org/dev/reference/as.promise.mirai.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make mirai Promise — as.promise.mirai","text":"x object class 'mirai'.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/as.promise.mirai.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make mirai Promise — as.promise.mirai","text":"'promise' object.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/as.promise.mirai.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make mirai Promise — as.promise.mirai","text":"function S3 method generic .promise() class 'mirai'. Requires promises package. Allows 'mirai' used promise pipe %...>%, schedules function run upon resolution 'mirai'.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/as.promise.mirai.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make mirai Promise — as.promise.mirai","text":"","code":"if (FALSE) { # interactive() && requireNamespace(\"promises\", quietly = TRUE) library(promises)  p <- as.promise(mirai(\"example\")) print(p) is.promise(p)  p2 <- mirai(\"completed\") %...>% identity() p2$then(cat) is.promise(p2) }"},{"path":"https://mirai.r-lib.org/dev/reference/as.promise.mirai_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Make mirai_map Promise — as.promise.mirai_map","title":"Make mirai_map Promise — as.promise.mirai_map","text":"Creates 'promise' 'mirai_map'.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/as.promise.mirai_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make mirai_map Promise — as.promise.mirai_map","text":"","code":"# S3 method for class 'mirai_map' as.promise(x)"},{"path":"https://mirai.r-lib.org/dev/reference/as.promise.mirai_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make mirai_map Promise — as.promise.mirai_map","text":"x object class 'mirai_map'.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/as.promise.mirai_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make mirai_map Promise — as.promise.mirai_map","text":"'promise' object.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/as.promise.mirai_map.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make mirai_map Promise — as.promise.mirai_map","text":"function S3 method generic .promise() class 'mirai_map'. Requires promises package. Allows 'mirai_map' used promise pipe %...>%, schedules function run upon resolution entire 'mirai_map'. implementation internally uses promises::promise_all(). promises successful, returned promise resolve list promise values; promise fails, first error encountered used reject returned promise.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/as.promise.mirai_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make mirai_map Promise — as.promise.mirai_map","text":"","code":"if (FALSE) { # interactive() && requireNamespace(\"promises\", quietly = TRUE) library(promises)  with(daemons(1), {   mp <- mirai_map(1:3, function(x) { Sys.sleep(1); x })   p <- as.promise(mp)   print(p)   p %...>% print   mp[.flat] }) }"},{"path":"https://mirai.r-lib.org/dev/reference/call_mirai.html","id":null,"dir":"Reference","previous_headings":"","what":"mirai (Call Value) — call_mirai","title":"mirai (Call Value) — call_mirai","text":"Waits 'mirai' resolve still progress, stores value $data, returns 'mirai' object.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/call_mirai.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"mirai (Call Value) — call_mirai","text":"","code":"call_mirai(x)"},{"path":"https://mirai.r-lib.org/dev/reference/call_mirai.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"mirai (Call Value) — call_mirai","text":"x 'mirai' object, list 'mirai' objects.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/call_mirai.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"mirai (Call Value) — call_mirai","text":"passed object (invisibly). 'mirai', retrieved value stored $data.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/call_mirai.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"mirai (Call Value) — call_mirai","text":"Accepts list 'mirai' objects, returned mirai_map(), well individual 'mirai'. Waits asynchronous operation(s) complete still progress, blocking user-interruptible. x[] may also used wait return value mirai x, equivalent call_mirai(x)$data.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/call_mirai.html","id":"alternatively","dir":"Reference","previous_headings":"","what":"Alternatively","title":"mirai (Call Value) — call_mirai","text":"value 'mirai' may accessed time $data, yet resolve, 'unresolved' logical NA returned instead. Using unresolved() 'mirai' returns TRUE yet resolve FALSE otherwise. suitable use control flow statements .","code":""},{"path":"https://mirai.r-lib.org/dev/reference/call_mirai.html","id":"errors","dir":"Reference","previous_headings":"","what":"Errors","title":"mirai (Call Value) — call_mirai","text":"error occurs evaluation, error message returned character string class 'miraiError' 'errorValue'. is_mirai_error() may used test . elements original condition accessible via $ error object. stack trace comprising list calls also available $stack.trace. daemon crashes terminates unexpectedly evaluation, 'errorValue' 19 (Connection reset) returned. is_error_value() tests error conditions including 'mirai' errors, interrupts, timeouts.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/call_mirai.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"mirai (Call Value) — call_mirai","text":"","code":"if (FALSE) { # interactive() # using call_mirai() df1 <- data.frame(a = 1, b = 2) df2 <- data.frame(a = 3, b = 1) m <- mirai(as.matrix(rbind(df1, df2)), df1 = df1, df2 = df2, .timeout = 1000) call_mirai(m)$data  # using unresolved() m <- mirai(   {     res <- rnorm(n)     res / rev(res)   },   n = 1e6 ) while (unresolved(m)) {   cat(\"unresolved\\n\")   Sys.sleep(0.1) } str(m$data) }"},{"path":"https://mirai.r-lib.org/dev/reference/cluster_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster Remote Launch Configuration — cluster_config","title":"Cluster Remote Launch Configuration — cluster_config","text":"Generates remote configuration launching daemons using cluster job scheduler Slurm sbatch, SGE Torque/PBS qsub LSF bsub.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/cluster_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster Remote Launch Configuration — cluster_config","text":"","code":"cluster_config(command = \"sbatch\", options = \"\", rscript = \"Rscript\")"},{"path":"https://mirai.r-lib.org/dev/reference/cluster_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster Remote Launch Configuration — cluster_config","text":"command [default \"sbatch\"] Slurm. Replace \"qsub\" SGE / Torque / PBS, \"bsub\" LSF. See examples . options [default \"\"] options supplied inside script file passed command, e.g. \"#SBATCH –mem=10G\", separated new line. See examples .  shell commands e.g. change working directory may also included.  certain setups, \"module load R\" final line required, example \"module load R/4.5.0\" specific R version.  avoidance doubt, initial shebang line \"#!/bin/bash\" required. rscript [default \"Rscript\"] assumes R executable search path. Replace full path Rscript executable remote machine necessary. launching Windows, \"Rscript\" replaced \"Rscript.exe\".","code":""},{"path":"https://mirai.r-lib.org/dev/reference/cluster_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster Remote Launch Configuration — cluster_config","text":"list required format supplied remote argument daemons() launch_remote().","code":""},{"path":[]},{"path":[]},{"path":"https://mirai.r-lib.org/dev/reference/collect_mirai.html","id":null,"dir":"Reference","previous_headings":"","what":"mirai (Collect Value) — collect_mirai","title":"mirai (Collect Value) — collect_mirai","text":"Waits 'mirai' resolve still progress, returns value directly. efficient version equivalent call_mirai(x)$data.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/collect_mirai.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"mirai (Collect Value) — collect_mirai","text":"","code":"collect_mirai(x, options = NULL)"},{"path":"https://mirai.r-lib.org/dev/reference/collect_mirai.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"mirai (Collect Value) — collect_mirai","text":"x 'mirai' object, list 'mirai' objects. options (x list mirai) character vector comprising combination collection options mirai_map(), \".flat\" c(\".progress\", \".stop\").","code":""},{"path":"https://mirai.r-lib.org/dev/reference/collect_mirai.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"mirai (Collect Value) — collect_mirai","text":"object (return value 'mirai'), list objects (length x, preserving names).","code":""},{"path":"https://mirai.r-lib.org/dev/reference/collect_mirai.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"mirai (Collect Value) — collect_mirai","text":"function wait asynchronous operation(s) complete still progress, blocking interruptible. x[] equivalent way wait return value mirai x.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/collect_mirai.html","id":"alternatively","dir":"Reference","previous_headings":"","what":"Alternatively","title":"mirai (Collect Value) — collect_mirai","text":"value 'mirai' may accessed time $data, yet resolve, 'unresolved' logical NA returned instead. Using unresolved() 'mirai' returns TRUE yet resolve FALSE otherwise. suitable use control flow statements .","code":""},{"path":"https://mirai.r-lib.org/dev/reference/collect_mirai.html","id":"errors","dir":"Reference","previous_headings":"","what":"Errors","title":"mirai (Collect Value) — collect_mirai","text":"error occurs evaluation, error message returned character string class 'miraiError' 'errorValue'. is_mirai_error() may used test . elements original condition accessible via $ error object. stack trace comprising list calls also available $stack.trace. daemon crashes terminates unexpectedly evaluation, 'errorValue' 19 (Connection reset) returned. is_error_value() tests error conditions including 'mirai' errors, interrupts, timeouts.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/collect_mirai.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"mirai (Collect Value) — collect_mirai","text":"","code":"if (FALSE) { # interactive() # using collect_mirai() df1 <- data.frame(a = 1, b = 2) df2 <- data.frame(a = 3, b = 1) m <- mirai(as.matrix(rbind(df1, df2)), df1 = df1, df2 = df2, .timeout = 1000) collect_mirai(m)  # using x[] m[]  # mirai_map with collection options daemons(1, dispatcher = FALSE) m <- mirai_map(1:3, rnorm) collect_mirai(m, c(\".flat\", \".progress\")) daemons(0) }"},{"path":"https://mirai.r-lib.org/dev/reference/daemon.html","id":null,"dir":"Reference","previous_headings":"","what":"Daemon Instance — daemon","title":"Daemon Instance — daemon","text":"Starts execution daemon receive mirai() requests. Awaits data, evaluates expression environment containing supplied data, returns value host caller. Daemon settings may controlled daemons() function need invoked directly, unless deploying manually remote resources.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/daemon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Daemon Instance — daemon","text":"","code":"daemon(   url,   dispatcher = TRUE,   ...,   asyncdial = FALSE,   autoexit = TRUE,   cleanup = TRUE,   output = FALSE,   idletime = Inf,   walltime = Inf,   maxtasks = Inf,   id = NULL,   tls = NULL,   rs = NULL )"},{"path":"https://mirai.r-lib.org/dev/reference/daemon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Daemon Instance — daemon","text":"url character host dispatcher URL dial , including port connect , e.g. 'tcp://hostname:5555' 'tls+tcp://10.75.32.70:5555'. dispatcher [default TRUE] logical value, set TRUE using dispatcher FALSE otherwise. ... reserved currently used. asyncdial [default FALSE] whether perform dials asynchronously. default FALSE error connection immediately possible (instance daemons() yet called host, specified port open etc.). Specifying TRUE continues retrying (indefinitely) immediately successful, resilient can mask potential connection issues. autoexit [default TRUE] logical value, whether daemon exit automatically socket connection ends. signal tools package, tools::SIGINT, equivalent integer value supplied, signal additionally raised exit (see 'Persistence' section ). cleanup [default TRUE] logical value, whether perform cleanup global environment restore attached packages options initial state evaluation. output [default FALSE] logical value, output generated stdout / stderr TRUE, else discard FALSE. Specify TRUE ... argument daemons() launch_local() provide redirection output host process (applicable local daemons). idletime [default Inf] integer milliseconds maximum time wait task (idle time) exiting. walltime [default Inf] integer milliseconds soft walltime (time limit) .e. minimum amount real time elapsed exiting. maxtasks [default Inf] integer maximum number tasks execute (task limit) exiting. id [default NULL] (optional) integer daemon ID provided dispatcher track connection status. Causes status() report ID $events daemon connects disconnects. tls [default NULL] required secure TLS connections 'tls+tcp://'. Either character path file containing X.509 certificate(s) PEM format, comprising certificate authority certificate chain starting TLS certificate ending CA certificate, length 2 character vector comprising [] certificate authority certificate chain [ii] empty string \"\". rs [default NULL] initial value .Random.seed. set automatically using L'Ecuyer-CMRG RNG streams generated host process applicable, independently supplied.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/daemon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Daemon Instance — daemon","text":"Invisibly, integer exit code: 0L normal termination, positive value self-imposed limit reached: 1L (idletime), 2L (walltime), 3L (maxtasks).","code":""},{"path":"https://mirai.r-lib.org/dev/reference/daemon.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Daemon Instance — daemon","text":"network topology daemons dial host dispatcher, listens url address. way, network resources may added removed dynamically host dispatcher automatically distributes tasks available daemons.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/daemon.html","id":"persistence","dir":"Reference","previous_headings":"","what":"Persistence","title":"Daemon Instance — daemon","text":"autoexit argument governs persistence settings daemon. default TRUE ensures exit cleanly socket connection ended. Instead TRUE, supplying signal tools package, tools::SIGINT, equivalent integer value, sets signal raised socket connection ends. instance, supplying SIGINT allows potentially immediate exit interrupting ongoing evaluation rather letting complete. Setting FALSE allows daemon persist indefinitely even longer socket connection. allows host session end new session connect URL daemon dialled . Daemons must terminated daemons(NULL) case, sends explicit exit signals connected daemons.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/daemons.html","id":null,"dir":"Reference","previous_headings":"","what":"Daemons (Set Persistent Processes) — daemons","title":"Daemons (Set Persistent Processes) — daemons","text":"Set daemons, persistent background processes, receive mirai() requests. Specify n create daemons local machine. Specify url receive connections remote daemons (distributed computing across network). Specify remote optionally launch remote daemons via remote configuration. Dispatcher (enabled default) ensures optimal scheduling.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/daemons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Daemons (Set Persistent Processes) — daemons","text":"","code":"daemons(   n,   url = NULL,   remote = NULL,   dispatcher = TRUE,   ...,   seed = NULL,   serial = NULL,   tls = NULL,   pass = NULL,   .compute = NULL )"},{"path":"https://mirai.r-lib.org/dev/reference/daemons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Daemons (Set Persistent Processes) — daemons","text":"n integer number daemons launch. url [default NULL] specified, character string comprising URL listen remote daemons, including port accepting incoming connections, e.g. 'tcp://hostname:5555' 'tcp://10.75.32.70:5555'. Specify URL scheme 'tls+tcp://' use secure TLS connections (details see Distributed Computing section ). Auxiliary function host_url() may used construct valid host URL. remote [default NULL] required launching remote daemons, configuration generated remote_config() ssh_config(). dispatcher [default TRUE] logical value, whether use dispatcher. Dispatcher runs separate process ensure optimal scheduling, normally kept (details see Dispatcher section ). ... (optional) additional arguments passed daemon() launching daemons. include asyncdial, autoexit, cleanup, output, maxtasks, idletime walltime. seed [default NULL] (optional) supply random seed (single value, interpreted integer). used inititalise L'Ecuyer-CMRG RNG streams sent daemon. Note reproducible results can expected dispatcher = FALSE, unpredictable timing task completions otherwise influence tasks sent daemon. Even dispatcher = FALSE, reproducibility guaranteed order tasks sent deterministic. serial [default NULL] (optional, requires dispatcher) configuration created serial_config() register serialization unserialization functions normally non-exportable reference objects, Arrow Tables torch tensors. NULL, configurations registered register_serial() automatically applied. tls [default NULL] (optional secure TLS connections) supplied, zero-configuration single-use keys certificates automatically generated. supplied, either character path file containing PEM-encoded TLS certificate associated private key (may contain additional certificates leading validation chain, TLS certificate first), length 2 character vector comprising [] TLS certificate (optionally certificate chain) [ii] associated private key. pass [default NULL] (required private key supplied tls encrypted password) security, provided function returns value, rather directly. .compute [default NULL] character value compute profile use (independent set daemons), NULL use 'default' profile.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/daemons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Daemons (Set Persistent Processes) — daemons","text":"integer number daemons launched locally (zero specifying url using remote launcher).","code":""},{"path":"https://mirai.r-lib.org/dev/reference/daemons.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Daemons (Set Persistent Processes) — daemons","text":"Use daemons(0) reset daemon connections: connected daemons /dispatchers exit automatically. mirai reverts default behaviour creating new background process request. unresolved 'mirai' return 'errorValue' 19 (Connection reset) reset. Daemons must reset calling daemons() revised settings compute profile. Daemons may added time using launch_local() launch_remote() without needing revise daemons settings. host session ends, connected dispatcher daemon processes automatically exit soon connections dropped (unless daemons started autoexit = FALSE). daemon processing task, exit soon task complete. reset persistent daemons started autoexit = FALSE, use daemons(NULL) instead, also sends exit signals connected daemons prior resetting. historical reasons, daemons() arguments (optionally .compute) returns value status().","code":""},{"path":"https://mirai.r-lib.org/dev/reference/daemons.html","id":"local-daemons","dir":"Reference","previous_headings":"","what":"Local Daemons","title":"Daemons (Set Persistent Processes) — daemons","text":"Daemons provide potentially efficient solution asynchronous operations new processes longer need created ad hoc basis. Supply argument n set number daemons. New background daemon() processes automatically created local machine connecting back host process, either directly via dispatcher.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/daemons.html","id":"dispatcher","dir":"Reference","previous_headings":"","what":"Dispatcher","title":"Daemons (Set Persistent Processes) — daemons","text":"default dispatcher = TRUE launches background process running dispatcher(). Dispatcher connects daemons behalf host, queues tasks, ensures optimal FIFO scheduling. Dispatcher also enables () mirai cancellation using stop_mirai() using .timeout argument mirai(), (ii) use custom serialization configurations. Specifying dispatcher = FALSE, daemons connect directly host tasks distributed round-robin fashion, tasks queued daemon. Optimal scheduling guaranteed , depending duration tasks, can queued one daemon others remain idle. However, solution resource-light, suited similar-length tasks, concurrent tasks typically exceed available daemons.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/daemons.html","id":"distributed-computing","dir":"Reference","previous_headings":"","what":"Distributed Computing","title":"Daemons (Set Persistent Processes) — daemons","text":"Specifying url character string allows tasks distributed across network. n required case providing launch configuration remote launch remote daemons. Supply URL 'tcp://' scheme, 'tcp://10.75.32.70:5555'. host / dispatcher listens address, utilising single port. Individual daemons (started daemon()) may dial URL. Host / dispatcher automatically adjusts number daemons actually connected, allowing dynamic upscaling downscaling required. Switching URL scheme 'tls+tcp://' automatically upgrades connection use TLS. auxiliary function host_url() may used construct valid host URL based computer's hostname. IPv6 addresses also supported must enclosed square brackets [] avoid confusion final colon separating port. example, port 5555 IPv6 loopback address ::1 specified 'tcp://[::1]:5555'. Specifying wildcard value zero port number e.g. 'tcp://[::1]:0' automatically assign free ephemeral port. Use status() inspect actual assigned port time. Specify remote call remote_config() ssh_config() launch daemons remote machines. Otherwise, launch_remote() may used generate shell commands deploy daemons manually remote resources.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/daemons.html","id":"compute-profiles","dir":"Reference","previous_headings":"","what":"Compute Profiles","title":"Daemons (Set Persistent Processes) — daemons","text":"NULL, \"default\" compute profile used. Providing character value .compute creates new compute profile name specified. compute profile retains daemons settings, may operated independently . usage examples follow: local / remote daemons may set host URL specifying .compute \"remote\", creates new compute profile. Subsequent mirai() calls may sent local computation specifying .compute argument, remote computation connected daemons specifying .compute argument \"remote\". cpu / gpu tasks may require access different types daemon, GPUs. case, daemons() may called set host URLs CPU-daemons GPUs, specifying .compute argument \"cpu\" \"gpu\" respectively. supplying .compute argument subsequent mirai() calls, tasks may sent either cpu gpu daemons appropriate. Note: actions resetting daemons via daemons(0) carried desired .compute argument specified.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/daemons.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Daemons (Set Persistent Processes) — daemons","text":"","code":"if (FALSE) { # interactive() # Create 2 local daemons (using dispatcher) daemons(2) status() # Reset to zero daemons(0)  # Create 2 local daemons (not using dispatcher) daemons(2, dispatcher = FALSE) status() # Reset to zero daemons(0)  # Set up dispatcher accepting TLS over TCP connections daemons(url = host_url(tls = TRUE)) status() # Reset to zero daemons(0)  # Set host URL for remote daemons to dial into daemons(url = host_url(), dispatcher = FALSE) status() # Reset to zero daemons(0)  # Use with() to evaluate with daemons for the duration of the expression with(   daemons(2),   {     m1 <- mirai(Sys.getpid())     m2 <- mirai(Sys.getpid())     cat(m1[], m2[], \"\\n\")   } )  if (FALSE) { # \\dontrun{  # Launch daemons on remotes 'nodeone' and 'nodetwo' using SSH # connecting back directly to the host URL over a TLS connection: daemons(   url = host_url(tls = TRUE),   remote = ssh_config(c('ssh://nodeone', 'ssh://nodetwo')) )  # Launch 4 daemons on the remote machine 10.75.32.90 using SSH tunnelling: daemons(   n = 4,   url = local_url(tcp = TRUE),   remote = ssh_config('ssh://10.75.32.90', tunnel = TRUE) )  } # } }"},{"path":"https://mirai.r-lib.org/dev/reference/daemons_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Daemons Set — daemons_set","title":"Daemons Set — daemons_set","text":"Returns logical value, whether daemons set given compute profile.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/daemons_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Daemons Set — daemons_set","text":"","code":"daemons_set(.compute = NULL)"},{"path":"https://mirai.r-lib.org/dev/reference/daemons_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Daemons Set — daemons_set","text":".compute [default NULL] character value compute profile query, NULL query 'default' profile. 'miraiCluster' obtain status.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/daemons_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Daemons Set — daemons_set","text":"Logical TRUE FALSE.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/daemons_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Daemons Set — daemons_set","text":"","code":"if (FALSE) { # interactive() daemons_set() daemons(1) daemons_set() daemons(0) }"},{"path":"https://mirai.r-lib.org/dev/reference/dispatcher.html","id":null,"dir":"Reference","previous_headings":"","what":"Dispatcher — dispatcher","title":"Dispatcher — dispatcher","text":"Dispatches tasks host daemons processing, using FIFO scheduling, queuing tasks required. Daemon / dispatcher settings controlled daemons() function need called directly.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/dispatcher.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dispatcher — dispatcher","text":"","code":"dispatcher(host, url = NULL, n = NULL, ..., tls = NULL, pass = NULL, rs = NULL)"},{"path":"https://mirai.r-lib.org/dev/reference/dispatcher.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dispatcher — dispatcher","text":"host character URL dispatcher listen (hosts dial ), typically IPC address. url (optional) character URL dispatcher listen (daemons dial ), including port connect e.g. 'tcp://hostname:5555' 'tcp://10.75.32.70:5555'. Specify 'tls+tcp://' use secure TLS connections. n (optional) specified, integer number daemons launch. case, local url automatically generated. ... (optional) additional arguments passed daemon(). include asyncdial, autoexit, cleanup. tls [default NULL] (required secure TLS connections) either character path file containing PEM-encoded TLS certificate associated private key (may contain additional certificates leading validation chain, TLS certificate first), length 2 character vector comprising [] TLS certificate (optionally certificate chain) [ii] associated private key. pass [default NULL] (required private key supplied tls encrypted password) security, provided function returns value, rather directly. rs [default NULL] initial value .Random.seed. set automatically using L'Ecuyer-CMRG RNG streams generated host process applicable, independently supplied.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/dispatcher.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dispatcher — dispatcher","text":"Invisible NULL.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/dispatcher.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dispatcher — dispatcher","text":"network topology dispatcher acts gateway host daemons, ensuring tasks received host dispatched FIFO basis processing. Tasks queued dispatcher ensure tasks sent daemons can begin immediate execution task.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/dot-flat.html","id":null,"dir":"Reference","previous_headings":"","what":"mirai Map Options — .flat","title":"mirai Map Options — .flat","text":"Expressions provided [] method 'mirai_map' objects.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/dot-flat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"mirai Map Options — .flat","text":"","code":".flat  .progress  .stop"},{"path":"https://mirai.r-lib.org/dev/reference/dot-flat.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"mirai Map Options — .flat","text":"object class bytecode length 1. object class bytecode length 1. object class bytecode length 1.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/dot-flat.html","id":"collection-options","dir":"Reference","previous_headings":"","what":"Collection Options","title":"mirai Map Options — .flat","text":"x[] collects results 'mirai_map' x returns list. wait asynchronous operations complete still progress, blocking user-interruptible. x[.flat] collects flattens map results vector, checking type avoid coercion. Note: errors 'errorValue' returned results differing type. x[.progress] collects map results whilst showing progress bar cli package, installed, completion percentage ETA, else simple text progress indicator. Note: map operation completes quickly progress bar may show . x[.stop] collects map results applying early stopping, stops first failure cancels remaining operations. options may combined manner : x[.stop, .progress] applies early stopping together progress indicator.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/everywhere.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate Everywhere — everywhere","title":"Evaluate Everywhere — everywhere","text":"Evaluate expression 'everywhere' connected daemons specified compute profile - must set prior calling function. Designed performing setup operations across daemons loading packages exporting common data. Resultant changes global environment, loaded packages options persisted regardless daemon's cleanup setting.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/everywhere.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate Everywhere — everywhere","text":"","code":"everywhere(.expr, ..., .args = list(), .compute = NULL)"},{"path":"https://mirai.r-lib.org/dev/reference/everywhere.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate Everywhere — everywhere","text":".expr expression evaluate asynchronously (arbitrary length, wrapped { } necessary), else pre-constructed language object. ... (optional) either named arguments (name = value pairs) specifying objects referenced, defined, .expr, environment containing objects. See 'evaluation' section . .args (optional) either named list specifying objects referenced, defined, .expr, environment containing objects. objects remain local evaluation environment opposed supplied ... - see 'evaluation' section . .compute [default NULL] character value compute profile use (independent set daemons), NULL use 'default' profile.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/everywhere.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate Everywhere — everywhere","text":"list mirai executed daemon. may waited inspected using call_mirai() collect_mirai().","code":""},{"path":"https://mirai.r-lib.org/dev/reference/everywhere.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluate Everywhere — everywhere","text":"function called mirai operations progress. necessary, wait mirai operations complete. function force synchronization point, using concurrently mirai operations guarantee timing instructions received, received daemon.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/everywhere.html","id":"evaluation","dir":"Reference","previous_headings":"","what":"Evaluation","title":"Evaluate Everywhere — everywhere","text":"expression .expr evaluated separate R process clean environment (global environment), consisting objects supplied .args, objects passed ... assigned global environment process. evaluation occurs clean environment, undefined objects must supplied ... /.args, including self-defined functions. Functions package use namespaced calls mirai::mirai(), else package loaded beforehand part .expr. evaluation occur global environment, supply objects ... rather .args, e.g. free variables helper functions defined function bodies, scoping rules may otherwise prevent found.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/everywhere.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate Everywhere — everywhere","text":"","code":"if (FALSE) { # interactive() daemons(1) # export common data by a super-assignment expression: everywhere(y <<- 3) # '...' variables are assigned to the global environment # '.expr' may be specified as an empty {} in such cases: everywhere({}, a = 1, b = 2) m <- mirai(a + b - y == 0L) m[] # everywhere() returns a list of mirai which may be waited for and inspected mlist <- everywhere(\"just a normal operation\") collect_mirai(mlist) mlist <- everywhere(stop(\"error\")) collect_mirai(mlist) daemons(0)  # loading a package on all daemons daemons(1, dispatcher = FALSE) everywhere(library(parallel)) m <- mirai(\"package:parallel\" %in% search()) m[] daemons(0) }"},{"path":"https://mirai.r-lib.org/dev/reference/host_url.html","id":null,"dir":"Reference","previous_headings":"","what":"URL Constructors — host_url","title":"URL Constructors — host_url","text":"host_url() constructs valid host URL (daemons may connect) based computer's IP address. may supplied directly url argument daemons(). local_url() constructs URL suitable local daemons, use SSH tunnelling. may supplied directly url argument daemons().","code":""},{"path":"https://mirai.r-lib.org/dev/reference/host_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"URL Constructors — host_url","text":"","code":"host_url(tls = FALSE, port = 0)  local_url(tcp = FALSE, port = 0)"},{"path":"https://mirai.r-lib.org/dev/reference/host_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"URL Constructors — host_url","text":"tls [default FALSE] logical value whether use TLS case scheme used 'tls+tcp://'. port [default 0] numeric port use. 0 wildcard value automatically assigns free ephemeral port. host_url, port open connections network addresses daemons connecting . local_url, taken account tcp = TRUE. tcp [default FALSE] logical value whether use TCP connection. must used SSH tunnelling.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/host_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"URL Constructors — host_url","text":"character vector (comprising valid URL URLs), named host_url().","code":""},{"path":"https://mirai.r-lib.org/dev/reference/host_url.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"URL Constructors — host_url","text":"host_url() return vector URLs multiple network adapters use, named interface name (adapter friendly name Windows). entire vector passed url argument functions daemons(), first URL used. suitable IP addresses detected, computer's hostname used fallback. local_url() generates random URL platform's default inter-process communications transport: abstract Unix domain sockets Linux, Unix domain sockets MacOS, Solaris POSIX platforms, named pipes Windows.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/host_url.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"URL Constructors — host_url","text":"","code":"host_url() #>                 eth0              docker0  #>  \"tcp://10.1.0.13:0\" \"tcp://172.17.0.1:0\"  host_url(tls = TRUE) #>                     eth0                  docker0  #>  \"tls+tcp://10.1.0.13:0\" \"tls+tcp://172.17.0.1:0\"  host_url(tls = TRUE, port = 5555) #>                        eth0                     docker0  #>  \"tls+tcp://10.1.0.13:5555\" \"tls+tcp://172.17.0.1:5555\"   local_url() #> [1] \"abstract://4404be9a1f3be2de794dc9fd\" local_url(tcp = TRUE) #> [1] \"tcp://127.0.0.1:0\" local_url(tcp = TRUE, port = 5555) #> [1] \"tcp://127.0.0.1:5555\""},{"path":"https://mirai.r-lib.org/dev/reference/is_mirai.html","id":null,"dir":"Reference","previous_headings":"","what":"Is mirai / mirai_map — is_mirai","title":"Is mirai / mirai_map — is_mirai","text":"object 'mirai' 'mirai_map'.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/is_mirai.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is mirai / mirai_map — is_mirai","text":"","code":"is_mirai(x)  is_mirai_map(x)"},{"path":"https://mirai.r-lib.org/dev/reference/is_mirai.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is mirai / mirai_map — is_mirai","text":"x object.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/is_mirai.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is mirai / mirai_map — is_mirai","text":"Logical TRUE x class 'mirai' 'mirai_map' respectively, FALSE otherwise.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/is_mirai.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is mirai / mirai_map — is_mirai","text":"","code":"if (FALSE) { # interactive() daemons(1, dispatcher = FALSE) df <- data.frame() m <- mirai(as.matrix(df), df = df) is_mirai(m) is_mirai(df)  mp <- mirai_map(1:3, runif) is_mirai_map(mp) is_mirai_map(mp[]) daemons(0) }"},{"path":"https://mirai.r-lib.org/dev/reference/is_mirai_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Error Validators — is_mirai_error","title":"Error Validators — is_mirai_error","text":"Validator functions error value types created mirai.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/is_mirai_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Error Validators — is_mirai_error","text":"","code":"is_mirai_error(x)  is_mirai_interrupt(x)  is_error_value(x)"},{"path":"https://mirai.r-lib.org/dev/reference/is_mirai_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Error Validators — is_mirai_error","text":"x object.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/is_mirai_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Error Validators — is_mirai_error","text":"Logical value TRUE FALSE.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/is_mirai_error.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Error Validators — is_mirai_error","text":"object 'miraiError'. execution 'mirai' process fails, error message returned character string class 'miraiError' 'errorValue'. elements original condition accessible via $ error object. stack trace also available $stack.trace. object 'miraiInterrupt'. ongoing 'mirai' sent user interrupt, resolve empty character string classed 'miraiInterrupt' 'errorValue'. object 'errorValue', 'mirai' timeout, 'miraiError' 'miraiInterrupt'. catch-condition includes returned error values.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/is_mirai_error.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Error Validators — is_mirai_error","text":"","code":"if (FALSE) { # interactive() m <- mirai(stop()) call_mirai(m) is_mirai_error(m$data) is_mirai_interrupt(m$data) is_error_value(m$data) m$data$stack.trace  m2 <- mirai(Sys.sleep(1L), .timeout = 100) call_mirai(m2) is_mirai_error(m2$data) is_mirai_interrupt(m2$data) is_error_value(m2$data) }"},{"path":"https://mirai.r-lib.org/dev/reference/launch_local.html","id":null,"dir":"Reference","previous_headings":"","what":"Launch Daemon — launch_local","title":"Launch Daemon — launch_local","text":"launch_local spawns new background Rscript process calling daemon() specified arguments. launch_remote returns shell command deploying daemons character vector. configuration generated remote_config() ssh_config() supplied used launch daemon remote machine.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/launch_local.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Launch Daemon — launch_local","text":"","code":"launch_local(n = 1L, ..., tls = NULL, .compute = NULL)  launch_remote(   n = 1L,   remote = remote_config(),   ...,   tls = NULL,   .compute = NULL )"},{"path":"https://mirai.r-lib.org/dev/reference/launch_local.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Launch Daemon — launch_local","text":"n integer number daemons. launch_remote , 'miraiCluster' 'miraiNode'. ... (optional) arguments passed daemon(). include autoexit, cleanup, output, maxtasks, idletime walltime. supply override arguments originally provided daemons(), otherwise used instead. tls [default NULL] required secure TLS connections 'tls+tcp://'. Zero-configuration TLS certificates generated daemons() automatically passed daemon, without requiring specified . Otherwise, supply either character path file containing X.509 certificate(s) PEM format, comprising certificate authority certificate chain, length 2 character vector comprising [] certificate authority certificate chain [ii] empty string \"\". .compute [default NULL] character value compute profile use (independent set daemons), NULL use 'default' profile. remote required launching remote daemons, configuration generated remote_config() ssh_config(). empty remote_config() effect daemon launches returns shell commands deploying manually remote machines.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/launch_local.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Launch Daemon — launch_local","text":"launch_local: Integer number daemons launched. launch_remote: character vector daemon launch commands, classed 'miraiLaunchCmd'. printed output may copy / pasted directly remote machine.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/launch_local.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Launch Daemon — launch_local","text":"functions may used re-launch daemons exited reaching time task limits. Daemons must already set launchers work. generated command non-dispatcher daemons contain argument rs specifying length 7 L'Ecuyer-CMRG random seed supplied daemon. values different time function called. dispatcher daemons, equivalent random seed obtained automatically dispatcher, hence rs specified case.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/launch_local.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Launch Daemon — launch_local","text":"","code":"if (FALSE) { # interactive() daemons(url = host_url(), dispatcher = FALSE) status() launch_local(1L, cleanup = FALSE) launch_remote(1L, cleanup = FALSE) Sys.sleep(1) status() daemons(0)  daemons(url = host_url(tls = TRUE)) status() launch_local(2L, output = TRUE) Sys.sleep(1) status() daemons(0) }"},{"path":"https://mirai.r-lib.org/dev/reference/make_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Make Mirai Cluster — make_cluster","title":"Make Mirai Cluster — make_cluster","text":"make_cluster creates cluster type 'miraiCluster', may used cluster object function parallel base package parallel::clusterApply() parallel::parLapply(). stop_cluster stops cluster created make_cluster.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/make_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make Mirai Cluster — make_cluster","text":"","code":"make_cluster(n, url = NULL, remote = NULL, ...)  stop_cluster(cl)"},{"path":"https://mirai.r-lib.org/dev/reference/make_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make Mirai Cluster — make_cluster","text":"n integer number nodes (automatically launched local machine unless url supplied). url [default NULL] (specify remote nodes) character URL host remote nodes dial , including port accepting incoming connections, e.g. 'tcp://10.75.37.40:5555'. Specify URL scheme 'tls+tcp://' use secure TLS connections. remote [default NULL] (specify launch remote nodes) remote launch configuration generated remote_config() ssh_config(). supplied, nodes may deployed manually remote resources. ... additional arguments passed onto daemons(). cl 'miraiCluster'.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/make_cluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make Mirai Cluster — make_cluster","text":"make_cluster: object class 'miraiCluster' 'cluster'. 'miraiCluster' automatically assigned ID n nodes class 'miraiNode'. url supplied remote, shell commands deployment nodes remote resources printed console. stop_cluster: invisible NULL.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/make_cluster.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make Mirai Cluster — make_cluster","text":"R version 4.5 newer, parallel::makeCluster() specifying type = \"MIRAI\" equivalent function.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/make_cluster.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Make Mirai Cluster — make_cluster","text":"default behaviour clusters created function designed map closely possible clusters created parallel package. However, ... arguments passed onto daemons() additional customisation desired, although resultant behaviour may always supported.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/make_cluster.html","id":"remote-nodes","dir":"Reference","previous_headings":"","what":"Remote Nodes","title":"Make Mirai Cluster — make_cluster","text":"Specify url n set host connection remote nodes dial . n defaults one specified. Also specify remote launch nodes using configuration generated remote_config() ssh_config(). case, number nodes inferred configuration provided n disregarded. remote supplied, shell commands deploying nodes manually remote resources automatically printed console. launch_remote() may called time 'miraiCluster' return shell commands deployment nodes, 'miraiNode' return command single node.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/make_cluster.html","id":"status","dir":"Reference","previous_headings":"","what":"Status","title":"Make Mirai Cluster — make_cluster","text":"Call status() 'miraiCluster' check number currently active connections well host URL.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/make_cluster.html","id":"errors","dir":"Reference","previous_headings":"","what":"Errors","title":"Make Mirai Cluster — make_cluster","text":"Errors thrown parallel package mechanism one nodes failed (quit unexpectedly). resulting 'errorValue' returned 19 (Connection reset). types error, e.g. evaluation, result usual 'miraiError' returned.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/make_cluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make Mirai Cluster — make_cluster","text":"","code":"if (FALSE) { # interactive() cl <- make_cluster(2) cl cl[[1L]]  Sys.sleep(0.5) status(cl)  stop_cluster(cl) }"},{"path":"https://mirai.r-lib.org/dev/reference/mirai-package.html","id":null,"dir":"Reference","previous_headings":"","what":"mirai: Minimalist Async Evaluation Framework for R — mirai-package","title":"mirai: Minimalist Async Evaluation Framework for R — mirai-package","text":"Designed simplicity, 'mirai' evaluates R expression asynchronously parallel process, locally distributed network. Modern networking concurrency, built 'nanonext' 'NNG' (Nanomsg Next Gen), ensures reliable efficient scheduling fast inter-process communications TCP/IP secured TLS. Distributed computing can launch remote resources via SSH cluster managers. queued architecture readily handles tasks available processes, requiring storage file system. Innovative features include event-driven promises, asynchronous parallel map, automatic serialization otherwise non-exportable reference objects.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/mirai-package.html","id":"notes","dir":"Reference","previous_headings":"","what":"Notes","title":"mirai: Minimalist Async Evaluation Framework for R — mirai-package","text":"local mirai requests, default transport inter-process communications platform-dependent: abstract Unix domain sockets Linux, Unix domain sockets MacOS, Solaris POSIX platforms, named pipes Windows. may overriden, desired, specifying 'url' daemons() interface launching daemons using launch_local().","code":""},{"path":"https://mirai.r-lib.org/dev/reference/mirai-package.html","id":"reference-manual","dir":"Reference","previous_headings":"","what":"Reference Manual","title":"mirai: Minimalist Async Evaluation Framework for R — mirai-package","text":"vignette(\"mirai\", package = \"mirai\")","code":""},{"path":[]},{"path":"https://mirai.r-lib.org/dev/reference/mirai-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"mirai: Minimalist Async Evaluation Framework for R — mirai-package","text":"Maintainer: Charlie Gao charlie.gao@posit.co (ORCID) contributors: Joe Cheng joe@posit.co [contributor] Posit Software, PBC (03wc8by49) [copyright holder, funder] Hibiki AI Limited [copyright holder]","code":""},{"path":"https://mirai.r-lib.org/dev/reference/mirai.html","id":null,"dir":"Reference","previous_headings":"","what":"mirai (Evaluate Async) — mirai","title":"mirai (Evaluate Async) — mirai","text":"Evaluate expression asynchronously new background R process persistent daemon (local remote). function return immediately 'mirai', resolve evaluated result complete.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/mirai.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"mirai (Evaluate Async) — mirai","text":"","code":"mirai(.expr, ..., .args = list(), .timeout = NULL, .compute = NULL)"},{"path":"https://mirai.r-lib.org/dev/reference/mirai.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"mirai (Evaluate Async) — mirai","text":".expr expression evaluate asynchronously (arbitrary length, wrapped { } necessary), else pre-constructed language object. ... (optional) either named arguments (name = value pairs) specifying objects referenced, defined, .expr, environment containing objects. See 'evaluation' section . .args (optional) either named list specifying objects referenced, defined, .expr, environment containing objects. objects remain local evaluation environment opposed supplied ... - see 'evaluation' section . .timeout [default NULL] timeout, integer value milliseconds. mirai resolve 'errorValue' 5 (timed ) evaluation exceeds limit. .compute [default NULL] character value compute profile use (independent set daemons), NULL use 'default' profile.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/mirai.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"mirai (Evaluate Async) — mirai","text":"'mirai' object.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/mirai.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"mirai (Evaluate Async) — mirai","text":"function return 'mirai' object immediately. value mirai may accessed time $data, yet resolve, 'unresolved' logical NA returned instead. unresolved() may used mirai, returning TRUE 'mirai' yet resolve FALSE otherwise. suitable use control flow statements . Alternatively, call (wait ) result, use call_mirai() returned 'mirai'. block result returned. Specify .compute send mirai using specific compute profile (previously created daemons()), otherwise leave \"default\".","code":""},{"path":"https://mirai.r-lib.org/dev/reference/mirai.html","id":"evaluation","dir":"Reference","previous_headings":"","what":"Evaluation","title":"mirai (Evaluate Async) — mirai","text":"expression .expr evaluated separate R process clean environment (global environment), consisting objects supplied .args, objects passed ... assigned global environment process. evaluation occurs clean environment, undefined objects must supplied ... /.args, including self-defined functions. Functions package use namespaced calls mirai::mirai(), else package loaded beforehand part .expr. evaluation occur global environment, supply objects ... rather .args, e.g. free variables helper functions defined function bodies, scoping rules may otherwise prevent found.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/mirai.html","id":"timeouts","dir":"Reference","previous_headings":"","what":"Timeouts","title":"mirai (Evaluate Async) — mirai","text":"Specifying .timeout argument ensures mirai always resolves. using dispatcher, mirai cancelled times (stop_mirai() called). case, guarantee cancellation successful, code interrupted instance. using dispatcher, mirai task continue completion daemon process, even times host process.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/mirai.html","id":"errors","dir":"Reference","previous_headings":"","what":"Errors","title":"mirai (Evaluate Async) — mirai","text":"error occurs evaluation, error message returned character string class 'miraiError' 'errorValue'. is_mirai_error() may used test . elements original condition accessible via $ error object. stack trace comprising list calls also available $stack.trace. daemon crashes terminates unexpectedly evaluation, 'errorValue' 19 (Connection reset) returned. is_error_value() tests error conditions including 'mirai' errors, interrupts, timeouts.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/mirai.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"mirai (Evaluate Async) — mirai","text":"","code":"if (FALSE) { # interactive() # specifying objects via '...' n <- 3 m <- mirai(x + y + 2, x = 2, y = n) m m$data Sys.sleep(0.2) m$data  # passing the calling environment to '...' df1 <- data.frame(a = 1, b = 2) df2 <- data.frame(a = 3, b = 1) m <- mirai(as.matrix(rbind(df1, df2)), environment(), .timeout = 1000) m[]  # using unresolved() m <- mirai(   {     res <- rnorm(n)     res / rev(res)   },   n = 1e6 ) while (unresolved(m)) {   cat(\"unresolved\\n\")   Sys.sleep(0.1) } str(m$data)  # evaluating scripts using source() in '.expr' n <- 10L file <- tempfile() cat(\"r <- rnorm(n)\", file = file) m <- mirai({source(file); r}, file = file, n = n) call_mirai(m)$data unlink(file)  # use source(local = TRUE) when passing in local variables via '.args' n <- 10L file <- tempfile() cat(\"r <- rnorm(n)\", file = file) m <- mirai({source(file, local = TRUE); r}, .args = list(file = file, n = n)) call_mirai(m)$data unlink(file)  # passing a language object to '.expr' and a named list to '.args' expr <- quote(a + b + 2) args <- list(a = 2, b = 3) m <- mirai(.expr = expr, .args = args) collect_mirai(m) }"},{"path":"https://mirai.r-lib.org/dev/reference/mirai_map.html","id":null,"dir":"Reference","previous_headings":"","what":"mirai Map — mirai_map","title":"mirai Map — mirai_map","text":"Asynchronous parallel map function list vector using mirai, optional promises integration. Performs multiple map rows dataframe matrix.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/mirai_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"mirai Map — mirai_map","text":"","code":"mirai_map(.x, .f, ..., .args = list(), .promise = NULL, .compute = NULL)"},{"path":"https://mirai.r-lib.org/dev/reference/mirai_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"mirai Map — mirai_map","text":".x list atomic vector. Also accepts matrix dataframe, case multiple map performed rows. .f function applied element .x, row .x case may . ... (optional) named arguments (name = value pairs) specifying objects referenced, defined, .f. .args (optional) constant arguments .f, provided list. .promise (optional) supplied, registers promise mirai. Either function, supplied onFulfilled argument promises::() list 2 functions, supplied respectively onFulfilled onRejected promises::(). Using argument requires promises package. .compute [default NULL] character value compute profile use (independent set daemons), NULL use 'default' profile.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/mirai_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"mirai Map — mirai_map","text":"'mirai_map' (list 'mirai' objects).","code":""},{"path":"https://mirai.r-lib.org/dev/reference/mirai_map.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"mirai Map — mirai_map","text":"Sends application function .f element .x (row .x) computation separate mirai() call. .x named, names preserved. simple transparent behaviour designed make full use mirai scheduling minimise overall execution time. Facilitates recovery partial failure returning 'miraiError' / 'errorValue' case may , thus allowing failures re-run. function requires daemons previously set, error otherwise.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/mirai_map.html","id":"collection-options","dir":"Reference","previous_headings":"","what":"Collection Options","title":"mirai Map — mirai_map","text":"x[] collects results 'mirai_map' x returns list. wait asynchronous operations complete still progress, blocking user-interruptible. x[.flat] collects flattens map results vector, checking type avoid coercion. Note: errors 'errorValue' returned results differing type. x[.progress] collects map results whilst showing progress bar cli package, installed, completion percentage ETA, else simple text progress indicator. Note: map operation completes quickly progress bar may show . x[.stop] collects map results applying early stopping, stops first failure cancels remaining operations. options may combined manner : x[.stop, .progress] applies early stopping together progress indicator.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/mirai_map.html","id":"multiple-map","dir":"Reference","previous_headings":"","what":"Multiple Map","title":"mirai Map — mirai_map","text":".x matrix dataframe (object 'dim' attributes), multiple map performed rows. Character row names preserved names output. allows map 2 arguments, .f accept least many arguments columns. dataframe names, matrix column dimnames, named arguments provided .f. map columns instead, first wrap dataframe .list(), transpose matrix using t().","code":""},{"path":"https://mirai.r-lib.org/dev/reference/mirai_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"mirai Map — mirai_map","text":"","code":"if (FALSE) { # interactive() daemons(4)  # perform and collect mirai map mm <- mirai_map(c(a = 1, b = 2, c = 3), rnorm) mm mm[]  # map with constant args specified via '.args' mirai_map(1:3, rnorm, .args = list(n = 5, sd = 2))[]  # flatmap with helper function passed via '...' mirai_map(   10^(0:9),   function(x) rnorm(1L, valid(x)),   valid = function(x) min(max(x, 0L), 100L) )[.flat]  # unnamed matrix multiple map: arguments passed to function by position (mat <- matrix(1:4, nrow = 2L)) mirai_map(mat, function(x = 10, y = 0, z = 0) x + y + z)[.flat]  # named matrix multiple map: arguments passed to function by name mat <- matrix(1:4, nrow = 2L, dimnames = list(c(\"a\", \"b\"), c(\"y\", \"z\"))) mirai_map(mat, function(x = 10, y = 0, z = 0) x + y + z)[.flat]  # dataframe multiple map: using a function taking '...' arguments df <- data.frame(a = c(\"Aa\", \"Bb\"), b = c(1L, 4L)) mirai_map(df, function(...) sprintf(\"%s: %d\", ...))[.flat]  # indexed map over a vector (using a dataframe) v <- c(\"egg\", \"got\", \"ten\", \"nap\", \"pie\") mirai_map(   data.frame(1:length(v), v),   sprintf,   .args = list(fmt = \"%d_%s\") )[.flat]  # return a 'mirai_map' object, check for resolution, collect later mp <- mirai_map(2:4, function(x) runif(1L, x, x + 1)) unresolved(mp) mp mp[.flat] unresolved(mp)  # progress indicator counts up from 0 to 4 seconds res <- mirai_map(1:4, Sys.sleep)[.progress]  # stops early when second element returns an error tryCatch(mirai_map(list(1, \"a\", 3), sum)[.stop], error = identity)  daemons(0) } if (FALSE) { # interactive() && requireNamespace(\"promises\", quietly = TRUE) # promises example that outputs the results, including errors, to the console daemons(1, dispatcher = FALSE) ml <- mirai_map(   1:30,   function(i) {Sys.sleep(0.1); if (i == 30) stop(i) else i},   .promise = list(     function(x) cat(paste(x, \"\")),     function(x) { cat(conditionMessage(x), \"\\n\"); daemons(0) }   ) ) }"},{"path":"https://mirai.r-lib.org/dev/reference/nextstream.html","id":null,"dir":"Reference","previous_headings":"","what":"Next >> Developer Interface — nextstream","title":"Next >> Developer Interface — nextstream","text":"nextstream retrieves currently stored L'Ecuyer-CMRG RNG stream specified compute profile advances next stream. nextget retrieves specified item specified compute profile. nextcode translates integer exit codes returned daemon().","code":""},{"path":"https://mirai.r-lib.org/dev/reference/nextstream.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Next >> Developer Interface — nextstream","text":"","code":"nextstream(.compute = \"default\")  nextget(x, .compute = \"default\")  nextcode(xc)"},{"path":"https://mirai.r-lib.org/dev/reference/nextstream.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Next >> Developer Interface — nextstream","text":".compute [default NULL] character value compute profile use (independent set daemons), NULL use 'default' profile. x character value item retrieve. One \"n\" (number dispatcher daemons), \"pid\" (dispatcher process ID), \"dispatcher\" (URL connect dispatcher host) \"url\" (URL connect dispatcher daemons) \"tls\" (stored client TLS configuration use daemons). xc integer return value daemon().","code":""},{"path":"https://mirai.r-lib.org/dev/reference/nextstream.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Next >> Developer Interface — nextstream","text":"nextstream: length 7 integer vector, given .Random.seed L'Ecuyer-CMRG RNG use (may passed directly rs argument daemon()), else NULL stream yet created. nextget: requested item, else NULL present. nextcode: character string.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/nextstream.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Next >> Developer Interface — nextstream","text":"functions exported use packages extending mirai alternative launchers daemon() processes. nextstream: function called return value required. function also side effect automatically advancing stream stored within compute profile. ensures next recursive stream returned function called .","code":""},{"path":"https://mirai.r-lib.org/dev/reference/nextstream.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Next >> Developer Interface — nextstream","text":"","code":"if (FALSE) { # interactive() daemons(1L) nextstream() nextstream()  nextget(\"pid\") nextget(\"url\")  daemons(0) } nextcode(0L) #> [1] \"0 | Daemon connection terminated\" nextcode(1L) #> [1] \"1 | Daemon idletime limit reached\""},{"path":"https://mirai.r-lib.org/dev/reference/on_daemon.html","id":null,"dir":"Reference","previous_headings":"","what":"On Daemon — on_daemon","title":"On Daemon — on_daemon","text":"Returns logical value, whether evaluation taking place within mirai call daemon.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/on_daemon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"On Daemon — on_daemon","text":"","code":"on_daemon()"},{"path":"https://mirai.r-lib.org/dev/reference/on_daemon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"On Daemon — on_daemon","text":"Logical TRUE FALSE.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/on_daemon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"On Daemon — on_daemon","text":"","code":"if (FALSE) { # interactive() on_daemon() mirai(mirai::on_daemon())[] }"},{"path":"https://mirai.r-lib.org/dev/reference/register_serial.html","id":null,"dir":"Reference","previous_headings":"","what":"Register Serialization Configuration — register_serial","title":"Register Serialization Configuration — register_serial","text":"Registers serialization configuration, may set perform custom serialization unserialization normally non-exportable reference objects, allowing used seamlessly different R sessions. registered, functions apply daemons() calls serial argument NULL.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/register_serial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register Serialization Configuration — register_serial","text":"","code":"register_serial(class, sfunc, ufunc)"},{"path":"https://mirai.r-lib.org/dev/reference/register_serial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register Serialization Configuration — register_serial","text":"class character string (vector) class object custom serialization functions applied , e.g. 'ArrowTabular' c('torch_tensor', 'ArrowTabular'). sfunc function (list functions) accepts reference object inheriting class returns raw vector. ufunc function (list functions) accepts raw vector returns reference object.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/register_serial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Register Serialization Configuration — register_serial","text":"Invisible NULL.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/remote_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic Remote Launch Configuration — remote_config","title":"Generic Remote Launch Configuration — remote_config","text":"Provides flexible generic framework generating shell commands deploy daemons remotely.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/remote_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic Remote Launch Configuration — remote_config","text":"","code":"remote_config(   command = NULL,   args = c(\"\", \".\"),   rscript = \"Rscript\",   quote = FALSE )"},{"path":"https://mirai.r-lib.org/dev/reference/remote_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic Remote Launch Configuration — remote_config","text":"command command used effect daemon launch remote machine character string (e.g. \"ssh\"). Defaults \"ssh\" ssh_config, although may substituted full path specific SSH application. default NULL remote_config carry launches, causes launch_remote() return shell commands manual deployment remote machines. args (optional) arguments passed command, character vector must include \".\" element, substituted daemon launch command. Alternatively, list character vectors effect multiple launches (one list element). rscript [default \"Rscript\"] assumes R executable search path. Replace full path Rscript executable remote machine necessary. launching Windows, \"Rscript\" replaced \"Rscript.exe\". quote [default FALSE] logical value whether quote daemon launch command (required Slurm \"srun\" example, required Slurm \"sbatch\" \"ssh\").","code":""},{"path":"https://mirai.r-lib.org/dev/reference/remote_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic Remote Launch Configuration — remote_config","text":"list required format supplied remote argument daemons() launch_remote().","code":""},{"path":[]},{"path":"https://mirai.r-lib.org/dev/reference/remote_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic Remote Launch Configuration — remote_config","text":"","code":"# Slurm srun example remote_config(   command = \"srun\",   args = c(\"--mem 512\", \"-n 1\", \".\"),   rscript = file.path(R.home(\"bin\"), \"Rscript\") ) #> $command #> [1] \"srun\" #>  #> $args #> [1] \"--mem 512\" \"-n 1\"      \".\"         #>  #> $rscript #> [1] \"/opt/R/4.5.1/lib/R/bin/Rscript\" #>  #> $quote #> [1] FALSE #>  #> $tunnel #> [1] FALSE #>   # SSH requires 'quote = TRUE' remote_config(   command = \"/usr/bin/ssh\",   args = c(\"-fTp 22 10.75.32.90\", \".\"),   quote = TRUE ) #> $command #> [1] \"/usr/bin/ssh\" #>  #> $args #> [1] \"-fTp 22 10.75.32.90\" \".\"                   #>  #> $rscript #> [1] \"Rscript\" #>  #> $quote #> [1] TRUE #>  #> $tunnel #> [1] FALSE #>   # can be used to start local dameons with special configurations remote_config(   command = \"Rscript\",   rscript = \"--default-packages=NULL --vanilla\" ) #> $command #> [1] \"Rscript\" #>  #> $args #> [1] \"\"  \".\" #>  #> $rscript #> [1] \"--default-packages=NULL --vanilla\" #>  #> $quote #> [1] FALSE #>  #> $tunnel #> [1] FALSE #>"},{"path":"https://mirai.r-lib.org/dev/reference/require_daemons.html","id":null,"dir":"Reference","previous_headings":"","what":"Require Daemons — require_daemons","title":"Require Daemons — require_daemons","text":"Returns TRUE daemons set, otherwise produces informative error user set daemons, clickable function link cli package available.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/require_daemons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Require Daemons — require_daemons","text":"","code":"require_daemons(call = environment(), .compute = NULL)"},{"path":"https://mirai.r-lib.org/dev/reference/require_daemons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Require Daemons — require_daemons","text":"call (used cli package installed) execution environment currently running function, e.g. environment(). function mentioned error messages source error. .compute [default NULL] character value compute profile query, NULL query 'default' profile. 'miraiCluster' obtain status.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/require_daemons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Require Daemons — require_daemons","text":"Logical TRUE, else errors.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/require_daemons.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Require Daemons — require_daemons","text":"","code":"if (FALSE) { # interactive() daemons(1) require_daemons() daemons(0) }"},{"path":"https://mirai.r-lib.org/dev/reference/serial_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Serialization Configuration — serial_config","title":"Create Serialization Configuration — serial_config","text":"Returns serialization configuration, may set perform custom serialization unserialization normally non-exportable reference objects, allowing used seamlessly different R sessions. set passing serial argument daemons(), functions apply mirai requests compute profile.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/serial_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Serialization Configuration — serial_config","text":"","code":"serial_config(class, sfunc, ufunc)"},{"path":"https://mirai.r-lib.org/dev/reference/serial_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Serialization Configuration — serial_config","text":"class character string (vector) class object custom serialization functions applied , e.g. 'ArrowTabular' c('torch_tensor', 'ArrowTabular'). sfunc function (list functions) accepts reference object inheriting class returns raw vector. ufunc function (list functions) accepts raw vector returns reference object.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/serial_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Serialization Configuration — serial_config","text":"list comprising configuration. passed serial argument daemons().","code":""},{"path":"https://mirai.r-lib.org/dev/reference/serial_config.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Serialization Configuration — serial_config","text":"feature utilises 'refhook' system R native serialization.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/serial_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Serialization Configuration — serial_config","text":"","code":"cfg <- serial_config(\"test_cls\", function(x) serialize(x, NULL), unserialize) cfg #> [[1]] #> [1] \"test_cls\" #>  #> [[2]] #> [[2]][[1]] #> function (x)  #> serialize(x, NULL) #> <environment: 0x55b6ec31c0c0> #>  #>  #> [[3]] #> [[3]][[1]] #> function (connection, refhook = NULL)  #> { #>     if (typeof(connection) != \"raw\" && !is.character(connection) &&  #>         !inherits(connection, \"connection\"))  #>         stop(\"'connection' must be a connection\") #>     .Internal(unserialize(connection, refhook)) #> } #> <bytecode: 0x55b6ec327fe0> #> <environment: namespace:base> #>  #>   cfg2 <- serial_config(   c(\"class_one\", \"class_two\"),   list(function(x) serialize(x, NULL), function(x) serialize(x, NULL)),   list(unserialize, unserialize) ) cfg2 #> [[1]] #> [1] \"class_one\" \"class_two\" #>  #> [[2]] #> [[2]][[1]] #> function (x)  #> serialize(x, NULL) #> <environment: 0x55b6ec31c0c0> #>  #> [[2]][[2]] #> function (x)  #> serialize(x, NULL) #> <environment: 0x55b6ec31c0c0> #>  #>  #> [[3]] #> [[3]][[1]] #> function (connection, refhook = NULL)  #> { #>     if (typeof(connection) != \"raw\" && !is.character(connection) &&  #>         !inherits(connection, \"connection\"))  #>         stop(\"'connection' must be a connection\") #>     .Internal(unserialize(connection, refhook)) #> } #> <bytecode: 0x55b6ec327fe0> #> <environment: namespace:base> #>  #> [[3]][[2]] #> function (connection, refhook = NULL)  #> { #>     if (typeof(connection) != \"raw\" && !is.character(connection) &&  #>         !inherits(connection, \"connection\"))  #>         stop(\"'connection' must be a connection\") #>     .Internal(unserialize(connection, refhook)) #> } #> <bytecode: 0x55b6ec327fe0> #> <environment: namespace:base> #>  #>"},{"path":"https://mirai.r-lib.org/dev/reference/ssh_config.html","id":null,"dir":"Reference","previous_headings":"","what":"SSH Remote Launch Configuration — ssh_config","title":"SSH Remote Launch Configuration — ssh_config","text":"Generates remote configuration launching daemons SSH, option SSH tunnelling.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/ssh_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SSH Remote Launch Configuration — ssh_config","text":"","code":"ssh_config(   remotes,   tunnel = FALSE,   timeout = 10,   command = \"ssh\",   rscript = \"Rscript\" )"},{"path":"https://mirai.r-lib.org/dev/reference/ssh_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SSH Remote Launch Configuration — ssh_config","text":"remotes character URL vector URLs SSH , using 'ssh://' scheme including port open SSH connections (defaults 22 specified), e.g. 'ssh://10.75.32.90:22' 'ssh://nodename'. tunnel [default FALSE] logical value, whether use SSH tunnelling. TRUE, requires daemons() url hostname '127.0.0.1'. See 'SSH Tunnelling' section details. timeout [default 10] maximum time allowed connection setup seconds. command command used effect daemon launch remote machine character string (e.g. \"ssh\"). Defaults \"ssh\" ssh_config, although may substituted full path specific SSH application. default NULL remote_config carry launches, causes launch_remote() return shell commands manual deployment remote machines. rscript [default \"Rscript\"] assumes R executable search path. Replace full path Rscript executable remote machine necessary. launching Windows, \"Rscript\" replaced \"Rscript.exe\".","code":""},{"path":"https://mirai.r-lib.org/dev/reference/ssh_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SSH Remote Launch Configuration — ssh_config","text":"list required format supplied remote argument daemons() launch_remote().","code":""},{"path":"https://mirai.r-lib.org/dev/reference/ssh_config.html","id":"ssh-direct-connections","dir":"Reference","previous_headings":"","what":"SSH Direct Connections","title":"SSH Remote Launch Configuration — ssh_config","text":"simplest use SSH execute daemon launch command remote machine, dial back host / dispatcher URL. assumed SSH key-based authentication already place. relevant port host must also open inbound connections remote machine, hence suitable use within trusted networks.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/ssh_config.html","id":"ssh-tunnelling","dir":"Reference","previous_headings":"","what":"SSH Tunnelling","title":"SSH Remote Launch Configuration — ssh_config","text":"Use SSH tunnelling provides convenient way launch remote daemons without requiring remote machine able access host. Often firewall configurations security policies may prevent opening port accept outside connections. cases SSH tunnelling offers solution creating tunnel initial SSH connection made. simplicity, SSH tunnelling implementation uses port host daemon. SSH key-based authentication must already place, configuration required. use tunnelling, set hostname daemons() url argument '127.0.0.1'. Using local_url() tcp = TRUE also . Specifying specific port use optional, random ephemeral port assigned otherwise. example, specifying 'tcp://127.0.0.1:5555' uses local port '5555' create tunnel machine. host listens '127.0.0.1:5555' machine remotes dial '127.0.0.1:5555' respective machines. provides means launching daemons machine able access via SSH, local network cloud.","code":""},{"path":[]},{"path":"https://mirai.r-lib.org/dev/reference/ssh_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SSH Remote Launch Configuration — ssh_config","text":"","code":"# direct SSH example ssh_config(c(\"ssh://10.75.32.90:222\", \"ssh://nodename\"), timeout = 5) #> $command #> [1] \"ssh\" #>  #> $args #> $args[[1]] #> [1] \"-o ConnectTimeout=5 -fTp 222\" \"10.75.32.90\"                  #> [3] \".\"                            #>  #> $args[[2]] #> [1] \"-o ConnectTimeout=5 -fTp 22\" \"nodename\"                    #> [3] \".\"                           #>  #>  #> $rscript #> [1] \"Rscript\" #>  #> $quote #> [1] TRUE #>  #> $tunnel #> [1] FALSE #>   # SSH tunnelling example ssh_config(c(\"ssh://10.75.32.90:222\", \"ssh://nodename\"), tunnel = TRUE) #> $command #> [1] \"ssh\" #>  #> $args #> $args[[1]] #> [1] \"-o ConnectTimeout=10 -fTp 222\" \"10.75.32.90\"                   #> [3] \".\"                             #>  #> $args[[2]] #> [1] \"-o ConnectTimeout=10 -fTp 22\" \"nodename\"                     #> [3] \".\"                            #>  #>  #> $rscript #> [1] \"Rscript\" #>  #> $quote #> [1] TRUE #>  #> $tunnel #> [1] TRUE #>   if (FALSE) { # \\dontrun{  # launch 2 daemons on the remote machines 10.75.32.90 and 10.75.32.91 using # SSH, connecting back directly to the host URL over a TLS connection: daemons(   url = host_url(tls = TRUE),   remote = ssh_config(c(\"ssh://10.75.32.90:222\", \"ssh://10.75.32.91:222\")) )  # launch 2 daemons on the remote machine 10.75.32.90 using SSH tunnelling: daemons(   n = 2,   url = local_url(tcp = TRUE),   remote = ssh_config(\"ssh://10.75.32.90\", tunnel = TRUE) ) } # }"},{"path":"https://mirai.r-lib.org/dev/reference/status.html","id":null,"dir":"Reference","previous_headings":"","what":"Status Information — status","title":"Status Information — status","text":"Retrieve status information specified compute profile, comprising current connections daemons status.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Status Information — status","text":"","code":"status(.compute = NULL)"},{"path":"https://mirai.r-lib.org/dev/reference/status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Status Information — status","text":".compute [default NULL] character value compute profile query, NULL query 'default' profile. 'miraiCluster' obtain status.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Status Information — status","text":"named list comprising: connections - integer number active daemon connections. daemons - character URL host / dispatcher listening, else 0L daemons yet set. mirai (present using dispatcher) - named integer vector comprising: awaiting - number tasks queued execution dispatcher, executing - number tasks sent daemon execution, completed - number tasks result received (either completed cancelled).","code":""},{"path":"https://mirai.r-lib.org/dev/reference/status.html","id":"events","dir":"Reference","previous_headings":"","what":"Events","title":"Status Information — status","text":"dispatcher used combined daemon IDs, additional element events report positive integer ID daemon connects negative value disconnects. events since previous status query returned.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Status Information — status","text":"","code":"if (FALSE) { # interactive() status() daemons(url = \"tcp://[::1]:0\") status() daemons(0) }"},{"path":"https://mirai.r-lib.org/dev/reference/stop_mirai.html","id":null,"dir":"Reference","previous_headings":"","what":"mirai (Stop) — stop_mirai","title":"mirai (Stop) — stop_mirai","text":"Stops 'mirai' still progress, causing resolve immediately 'errorValue' 20 (Operation canceled).","code":""},{"path":"https://mirai.r-lib.org/dev/reference/stop_mirai.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"mirai (Stop) — stop_mirai","text":"","code":"stop_mirai(x)"},{"path":"https://mirai.r-lib.org/dev/reference/stop_mirai.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"mirai (Stop) — stop_mirai","text":"x 'mirai' object, list 'mirai' objects.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/stop_mirai.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"mirai (Stop) — stop_mirai","text":"Logical TRUE cancellation request successful (awaiting execution execution), else FALSE (already completed previously cancelled). always return FALSE using dispatcher. vector logical values supplying list 'mirai', returned mirai_map().","code":""},{"path":"https://mirai.r-lib.org/dev/reference/stop_mirai.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"mirai (Stop) — stop_mirai","text":"Using dispatcher allows cancellation 'mirai'. case 'mirai' awaiting execution, discarded queue never evaluated. case already execution, interrupt sent. successful cancellation request guarantee successful cancellation: task, portion , may already completed interrupt received. Even , compiled code always interruptible. noted, particularly code carries side effects execution, writing files, etc.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/stop_mirai.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"mirai (Stop) — stop_mirai","text":"","code":"if (FALSE) { # interactive() m <- mirai(Sys.sleep(n), n = 5) stop_mirai(m) m$data }"},{"path":"https://mirai.r-lib.org/dev/reference/unresolved.html","id":null,"dir":"Reference","previous_headings":"","what":"Query if a mirai is Unresolved — unresolved","title":"Query if a mirai is Unresolved — unresolved","text":"Query whether 'mirai', 'mirai' value list 'mirai' remains unresolved. Unlike call_mirai(), function wait completion.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/unresolved.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query if a mirai is Unresolved — unresolved","text":"","code":"unresolved(x)"},{"path":"https://mirai.r-lib.org/dev/reference/unresolved.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query if a mirai is Unresolved — unresolved","text":"x 'mirai' object list 'mirai' objects, 'mirai' value stored $data.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/unresolved.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query if a mirai is Unresolved — unresolved","text":"Logical TRUE x unresolved 'mirai' 'mirai' value list contains least one unresolved 'mirai', FALSE otherwise.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/unresolved.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Query if a mirai is Unresolved — unresolved","text":"Suitable use control flow statements . Note: querying resolution may cause previously unresolved 'mirai' resolve.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/unresolved.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query if a mirai is Unresolved — unresolved","text":"","code":"if (FALSE) { # interactive() m <- mirai(Sys.sleep(0.1)) unresolved(m) Sys.sleep(0.3) unresolved(m) }"},{"path":"https://mirai.r-lib.org/dev/reference/with.miraiDaemons.html","id":null,"dir":"Reference","previous_headings":"","what":"With Mirai Daemons — with.miraiDaemons","title":"With Mirai Daemons — with.miraiDaemons","text":"Evaluate expression daemons last duration expression. Ensure mirai within statement explicitly called (values collected) daemons reset completed.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/with.miraiDaemons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"With Mirai Daemons — with.miraiDaemons","text":"","code":"# S3 method for class 'miraiDaemons' with(data, expr, ...)"},{"path":"https://mirai.r-lib.org/dev/reference/with.miraiDaemons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"With Mirai Daemons — with.miraiDaemons","text":"data call daemons(). expr expression evaluate. ... used.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/with.miraiDaemons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"With Mirai Daemons — with.miraiDaemons","text":"return value expr.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/with.miraiDaemons.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"With Mirai Daemons — with.miraiDaemons","text":"function S3 method generic () class 'miraiDaemons'.","code":""},{"path":"https://mirai.r-lib.org/dev/reference/with.miraiDaemons.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"With Mirai Daemons — with.miraiDaemons","text":"","code":"if (FALSE) { # interactive() with(   daemons(2, dispatcher = FALSE),   {     m1 <- mirai(Sys.getpid())     m2 <- mirai(Sys.getpid())     cat(m1[], m2[], \"\\n\")   } )  status() }"},{"path":[]},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"new-features-development-version","dir":"Changelog","previous_headings":"","what":"New Features","title":"mirai (development version)","text":"Implements cluster_config() provides control using HPC job scheduler Slurm sbatch, SGE / Torque / PBS qsub LSF bsub. Multiple processes can now attach dispatcher instance share compute pool daemons. Simply pass dispatcher URL url daemons() call. Simpler launches using dispatcher - launch_remote() commands now irrespective number launches. Daemons automatically retrieve next RNG stream dispatcher longer require rs argument daemon(). New developer function require_daemons() prompts user set daemons already set.","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"updates-development-version","dir":"Changelog","previous_headings":"","what":"Updates","title":"mirai (development version)","text":"daemon() argument dispatcher now defaults TRUE - please take note manually launching daemons. Deprecated call_mirai_() now removed. Requires nanonext >= [1.6.0.9001].","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"mirai-230","dir":"Changelog","previous_headings":"","what":"mirai 2.3.0","title":"mirai 2.3.0","text":"CRAN release: 2025-05-22","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"behavioural-changes-2-3-0","dir":"Changelog","previous_headings":"","what":"Behavioural Changes","title":"mirai 2.3.0","text":"mirai() argument .timeout upgraded automatically cancel ongoing mirai upon timeout using dispatcher (thanks @-marc, @sebffischer #251). serial_config() now accepts vector arguments register multiple custom serialization configurations. Argument vec dropped internal optimizations mean option longer needs set.","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"new-features-2-3-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"mirai 2.3.0","text":"host_url() upgraded return local IP addresses (named network interface), provides comprehensive solution just using hostname. Adds register_serial() register serialization configurations daemons() calls (may used package authors convenience). Adds on_daemon() returns logical value, whether evaluation taking place within mirai call daemon. Adds daemons_set() returns logical value, whether daemons set given compute profile. daemons() now supports initial synchronization exceeding 10s (host/dispatcher/daemons). particularly relevant HPC setups (thanks @sebffischer, #275).","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"updates-2-3-0","dir":"Changelog","previous_headings":"","what":"Updates","title":"mirai 2.3.0","text":"functions use .compute, argument new default NULL, continues use default profile (hence result change behaviour). Fixes stop_mirai() failing interrupt certain cases non-Windows platforms, robust interruption tools::SIGINT supplied passed autoexit argument daemon() (thanks @LennardLux, #240). daemons() dispatcher argument ‘process’, deprecated mirai v2.1.0, removed. Requires nanonext >= 1.6.0. Package re-licensed MIT license.","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"mirai-220","dir":"Changelog","previous_headings":"","what":"mirai 2.2.0","title":"mirai 2.2.0","text":"CRAN release: 2025-03-20","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"behavioural-changes-2-2-0","dir":"Changelog","previous_headings":"","what":"Behavioural Changes","title":"mirai 2.2.0","text":"ssh_config() argument ‘port’ removed, tunnel port now inferred time launch, longer set configuration. local_url() adds logical argument ‘tcp’ easily constructing automatic local TCP URL setting daemons() SSH tunnelling.","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"new-features-2-2-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"mirai 2.2.0","text":"Adds .promise() method ‘mirai_map’ objects. resolve upon completion entire map operation.","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"updates-2-2-0","dir":"Changelog","previous_headings":"","what":"Updates","title":"mirai 2.2.0","text":"register_cluster() removed longer required. Directly use parallel::makeCluster(type = \"MIRAI\") create ‘miraiCluster’. call_mirai_() hence redundant now deprecated. () method daemons() now propagates “.compute” need specified functions mirai() within () clause. mirai() arguments ... .args now accept environments containing variables beginning dot . (#207). ‘miraiError’ stack traces longer sometimes contain additional (internal) call (#216). ‘miraiError’ condition $call objects now stripped ‘srcref’ attributes (thanks @lionel-, #218). mirai promise now rejects exactly way whether mirai already resolved time creation. avoids Shiny deep stack trace errors mirai already resolved (#229). daemons() calls error due remote launcher longer leave compute profile set (#237).","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"mirai-210","dir":"Changelog","previous_headings":"","what":"mirai 2.1.0","title":"mirai 2.1.0","text":"CRAN release: 2025-02-07","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"behavioural-changes-2-1-0","dir":"Changelog","previous_headings":"","what":"Behavioural Changes","title":"mirai 2.1.0","text":"daemons() now requires explicit reset providing revised settings compute profile, error otherwise. mirai_map() now errors daemons yet set (rather warn launch one local daemon). saisei() now removed longer required. daemons() dispatcher argument “thread” removed. daemons() dispatcher arguments “process” “none” formally deprecated removed future version.","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"updates-2-1-0","dir":"Changelog","previous_headings":"","what":"Updates","title":"mirai 2.1.0","text":"‘miraiError’ evaluation errors now return call stack $stack.trace list calls (srcrefs removed) without deparsing character strings. Multiple map dataframe matrix now correctly preserves row names input names output. Fixes language objects evaluated map function applied (#194). Fixes classes objects dataframe dropped multiple map (#196). Better cli errors collecting ‘mirai_map’. Fixes daemons(NULL) causing daemons started autoexit = FALSE quit, regression introduced mirai v2.0.0. Requires nanonext >= 1.5.0.","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"mirai-201","dir":"Changelog","previous_headings":"","what":"mirai 2.0.1","title":"mirai 2.0.1","text":"CRAN release: 2025-01-16","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"updates-2-0-1","dir":"Changelog","previous_headings":"","what":"Updates","title":"mirai 2.0.1","text":"cli package used, installed, richer progress bars error messages. [.progress_cli] longer separate option. [.stop] now reports index number errored. collect_mirai() replaces ‘…’ ‘options’ argument, collection options supplied character vector. avoids non-standard evaluation function. daemon() now returns integer exit code indicate reason termination. Adds nextcode() provide human-readable translation exit codes returned daemon(). everywhere() now returns list least one mirai regardless number actual connections.","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"mirai-200","dir":"Changelog","previous_headings":"","what":"mirai 2.0.0","title":"mirai 2.0.0","text":"CRAN release: 2025-01-08","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"new-architecture-2-0-0","dir":"Changelog","previous_headings":"","what":"New Architecture","title":"mirai 2.0.0","text":"Allows efficient tcp:// tls+tcp:// connection cases. number connected daemons may upscaled downscaled time without limit.","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"new-features-2-0-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"mirai 2.0.0","text":"daemons(dispatcher = TRUE) provides new efficient architecture dispatcher. argument reverts logical value, although ‘process’ still accepted retains previous behaviour v1 dispatcher. daemons() gains argument ‘serial’ register serialization configurations using dispatcher. automatically apply daemons connect. stop_mirai() now able cancel remote mirai tasks (using dispatcher), returning logical value indicating whether cancellation successful. ‘miraiError’ now preserves original condition object. means rlang::abort() custom metadata may now accessed using $ ‘miraiError’ (thanks @James-G-Hill #173).","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"updates-2-0-0","dir":"Changelog","previous_headings":"","what":"Updates","title":"mirai 2.0.0","text":"status() using new dispatcher updated provide concise insightful information. Enhanced return list mirai, may waited inspected (thanks @dgkf, #164). Drops argument ‘.serial’ serialization configurations now registered via argument daemons(). Gains new argument ‘dispatcher’, set TRUE connecting dispatcher FALSE connecting directly host. Gains argument ‘id’ accepts integer value allows status() track connection disconnection events. ‘…’ moved prevent partial matching optional arguments. ‘cleanup’ argument simplified TRUE/FALSE value. ‘timerstart’ argument removed. Enhanced now launch daemons originally-supplied arguments default. Simplified take argument ‘n’ instead ‘url’ many daemons launch. launch_local() now returns number daemons launched rather invisible NULL. collect_mirai() now interruptible takes ‘…’ argument accepting collection options provided ‘mirai_map’ [] method, .flat etc. ssh_config() simplified take argument ‘port’ instead ‘host’. SSH tunnelling, port used, hostname now required ‘127.0.0.1’ (longer accepting ‘localhost’). host_url() argument ‘ws’ removed TCP URL now always recommended (although websocket URLs still supported). saisei() defunct longer required, still available use old v1 dispatcher. daemons(dispatcher = \"thread\") (experimental threaded dispatcher) retired - based old dispatcher architecture future development focus current design. Specifying ‘dispatcher = thread’ defunct, point ‘dispatcher = process’ time . Requires nanonext >= 1.4.0.","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"mirai-131","dir":"Changelog","previous_headings":"","what":"mirai 1.3.1","title":"mirai 1.3.1","text":"CRAN release: 2024-11-15","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"updates-1-3-1","dir":"Changelog","previous_headings":"","what":"Updates","title":"mirai 1.3.1","text":"Cleanup packages detaches search path attempt unload , always safe . Fixes daemon crashes using packages data.table (thanks @D3SL, #166). serialization() deprecated mirai 1.2.0 now removed.","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"mirai-130","dir":"Changelog","previous_headings":"","what":"mirai 1.3.0","title":"mirai 1.3.0","text":"CRAN release: 2024-10-09","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"new-features-1-3-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"mirai 1.3.0","text":"daemons(dispatcher = \"thread\") implements threaded dispatcher (experimental), faster efficient alternative running dispatcher separate process. mirai_map() adds [.progress_cli] alternative progress indicator, using cli package show % complete ETA. daemons() gains argument ‘force’ control whether calls reset previous settings compute profile. daemon() gains argument ‘asyncdial’ allow control connection behaviour independently happens daemon exits.","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"behavioural-changes-1-3-0","dir":"Changelog","previous_headings":"","what":"Behavioural Changes","title":"mirai 1.3.0","text":"Argument ‘dispatcher’ now takes character options ‘process’, ‘thread’ ‘none’. Previous values TRUE/FALSE continue accepted (thanks @hadley #157). Return value now always integer - either number daemons set using dispatcher, number daemons launched locally (zero using remote launcher). Invalid type ... arguments now dropped instead throwing error. allows ... containing unused arguments easily passed functions. Now performs multiple map rows matrices dataframes (thanks @andrewGhazi, #147). Combining collection options now easier, fashion : x[.stop, .progress]. Collection options now work even mirai search path e.g. mirai::mirai_map(1:4, Sys.sleep)[.progress]. dispatcher() drops argument ‘asyncdial’ rarely useful set . everywhere() now errors specified compute profile yet set , rather fail silently. launch_local() launch_remote() now strictly require daemons set, error otherwise. serial_config() now validates arguments provided returns list. means saved configurations previous package versions must re-generated.","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"updates-1-3-0","dir":"Changelog","previous_headings":"","what":"Updates","title":"mirai 1.3.0","text":"Fixes daemons() correctly handle vector URLs passed ‘url’ . Fixes flatmap mirai_map()[.flat] assigning variable ‘typ’ calling environment. Performance enhancements mirai(), mirai_map() promises method. Requires nanonext >= 1.3.0. package shiny new hex logo.","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"mirai-120","dir":"Changelog","previous_headings":"","what":"mirai 1.2.0","title":"mirai 1.2.0","text":"CRAN release: 2024-08-18 everywhere() adds argument ‘.serial’ accept serialization configurations created serial_config(). allow normally non-exportable reference objects Arrow Tables torch tensors used seamlessly across parallel processes without additional marshalling steps. Configurations apply per compute profile basis. serialization() now deprecated favour usage everywhere(), removed future version. mirai_map() enhanced perform multiple map 2D lists/vectors, allowing advanced patterns mapping rows dataframe matrix. ‘mirai_map’ [] method gains option [.flat] collect flatten results, avoiding coercion. Collecting ‘mirai_map’ longer spuriously introduces empty names none present originally. Faster local daemons(dispatcher = FALSE) make_cluster() using asynchronous launches (thanks @mtmorgan #123). Local dispatcher daemons now synchronize host, non-dispatcher daemons (prevents use connected). Fixes rare cases everywhere() reaching daemons using dispatcher. efficient dispatcher startup loading base package, addition reading startup configurations (thanks @krlmlr). Removes hard dependency stats utils base packages. Requires nanonext >= 1.2.0.","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"mirai-111","dir":"Changelog","previous_headings":"","what":"mirai 1.1.1","title":"mirai 1.1.1","text":"CRAN release: 2024-07-01 serialization() function signature return value slightly modified clarity. Successful registration / cancellation messages longer printed console. dispatcher() argument ‘retry’ now defaults FALSE consistency non-dispatcher behaviour. remote_config() gains argument ‘quote’ control whether quote daemon launch command, now works Slurm (thanks @michaelmayer2 #119). Ephemeral daemons now exit soon permissible, eliminating 2s linger period. Requires nanonext >= 1.1.1.","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"mirai-110","dir":"Changelog","previous_headings":"","what":"mirai 1.1.0","title":"mirai 1.1.0","text":"CRAN release: 2024-06-06 x[] collects results mirai_map x, waiting asynchronous operations complete. x[.progress] collects results whilst showing text progress bar. x[.stop] collects results applying early-stopping, stops first error, aborts remaining -progress operations. Adds ‘mirai’ method x[] efficient equivalent interruptible call_mirai_(x)$data. Adds collect_mirai() efficient equivalent non-interruptible call_mirai(x)$data. unresolved(), call_mirai(), collect_mirai() stop_mirai() now accept list ‘mirai’ returned mirai_map(). Improved mirai print method indicates whether mirai resolved. Calling daemons() new settings compute profile already set now implicitly resets daemons applying new settings instead silently nothing. Argument ‘resilience’ retired daemons() automatic re-tries longer performed non-dispatcher daemons. New argument ‘retry’ dispatcher() governs whether auto-retry dispatcher case. Fixes promises method potential crashes launching improbably short-lived mirai. Fixes bug cause hang crash launching additional non-dispatcher daemons. Requires nanonext >= 1.1.0.","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"mirai-100","dir":"Changelog","previous_headings":"","what":"mirai 1.0.0","title":"mirai 1.0.0","text":"CRAN release: 2024-05-03 innovation allows higher responsiveness massive scalability ‘mirai’ promises. (breaking change) longer permits unnamed list supplied ‘.args’. allows environment e.g. environment() supplied ‘.args’ element ‘…’. allows evaluation symbol ‘mirai’ environment, e.g. mirai(x, x = 1). new argument ‘host’ allows specifying localhost URL port create standalone configuration object. order arguments ‘tunnel’ ‘timeout’ reversed. stop_mirai() now resolves ‘errorValue’ 20 (operation canceled) case asynchronous task still ongoing (thanks @jcheng5 #110). Rejected promises now show complete error code message case ‘errorValue’. ‘miraiError’ reverts including trailing line break (prior mirai 0.13.2). Non-dispatcher local daemons now synchronize host cases (prevents use connected). [ method ‘miraiCluster’ longer produces ‘miraiCluster’ object (thanks @HenrikBengtsson #83). Faster startup time parallel package now loaded first used. Requires nanonext >= 1.0.0.","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"mirai-0132","dir":"Changelog","previous_headings":"","what":"mirai 0.13.2","title":"mirai 0.13.2","text":"CRAN release: 2024-04-11 mirai() everywhere() behaviour changed ‘…’ args now assigned global environment daemon process. Adds () method mirai daemons, allowing example: (daemons(4), {expr}), daemons last duration ‘expr’. Adds register_cluster() registering ‘miraiCluster’ parallel Cluster type (requires R >= 4.4). Adds .promising() method ‘mirai’ promises package. ‘miraiError’ now includes full call stack, may accessed $stack.trace, includes trailing line break consistency ‘.character.error()’. mirai promises now preserve deep stacks ‘miraiError’ occurs within Shiny app (thanks @jcheng5 #104). Simplified registration ‘parallel’ ‘promises’ methods (thanks @jcheng5 #103). Fixes promises error handling Shiny vignette (thanks @jcheng5 #98 #99). Requires R >= 3.6.","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"mirai-0131","dir":"Changelog","previous_headings":"","what":"mirai 0.13.1","title":"mirai 0.13.1","text":"Fixes regression mirai 0.12.1, introduced potential unintentional low level errors emerge querying dispatcher (thanks @dsweber2 reporting downstream {targets}).","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"mirai-0130","dir":"Changelog","previous_headings":"","what":"mirai 0.13.0","title":"mirai 0.13.0","text":"serialization adds arguments ‘class’ ‘vec’ custom serialisation reference object types. Requires nanonext >= 0.13.3.","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"mirai-0121","dir":"Changelog","previous_headings":"","what":"mirai 0.12.1","title":"mirai 0.12.1","text":"CRAN release: 2024-02-02 Dispatcher initial sync timeout widened 10s allow launching large numbers daemons. Default ssh_config() argument ‘timeout’ widened 10 (seconds). Fixes daemons() specifying ‘output = FALSE’ registering TRUE instead. Fixes use everywhere() specifying ‘.args’ unnamed list ‘.expr’ language object. Ensures compatibility nanonext >= 0.13.0. Internal performance enhancements.","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"mirai-0120","dir":"Changelog","previous_headings":"","what":"mirai 0.12.0","title":"mirai 0.12.0","text":"CRAN release: 2024-01-12 minimal print methods ‘mirai’ ‘miraiCluster’. Adds local_url() helper construct random inter-process communications URL local daemons (thanks @noamross #90). daemon() argument ‘autoexit’ now accepts signal value tools::SIGINT order raise upon exit. daemon() now records state initial global environment objects (e.g. created .Rprofile) cleanup purposes (thanks @noamross #91). Slightly optimal .promise() method ‘mirai’. Eliminates potential memory leaks along certain error paths. Requires nanonext >= 0.12.0.","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"mirai-0113","dir":"Changelog","previous_headings":"","what":"mirai 0.11.3","title":"mirai 0.11.3","text":"CRAN release: 2023-12-07 Implements serialization() registering custom serialization unserialization functions using daemons. Introduces call_mirai_(), user-interruptible version call_mirai() suitable interactive use. ‘.args’ now coerce list object list supplied, rather error. ‘.signal’ argument removed - now ‘mirai’ signal daemons set . everywhere() now returns invisible NULL case specified compute profile set , rather error. mirai() specifying timeout daemons() set - timeout begins immediately rather ephemeral daemon connected - please factor small amount time daemon launch. make_cluster() now prints daemon launch commands ‘url’ specified without ‘remote’ whether interactive. Cluster node failures load balanced operations now rely ‘parallel’ mechanism error longer fail early automatically stop cluster. Fixes regression since 0.11.0 prevented dispatcher exiting timely manner tasks backlogged (thanks @wlandau #86). Improved memory efficiency stability dispatcher. longer loads ‘promises’ package already loaded (makes ‘mirai’ method available via hook function). Requires nanonext >= 0.11.0.","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"mirai-0112","dir":"Changelog","previous_headings":"","what":"mirai 0.11.2","title":"mirai 0.11.2","text":"CRAN release: 2023-11-15 make_cluster() specifying ‘url’ now succeeds implied ‘n’ one. Fixes mirai() specifying language object name ‘.expr’ R versions 4.0 earlier. Fixes regression 0.11.1 prevented correct random seed set using dispatcher. Internal performance enhancements.","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"mirai-0111","dir":"Changelog","previous_headings":"","what":"mirai 0.11.1","title":"mirai 0.11.1","text":"CRAN release: 2023-11-04 Adds ‘mirai’ method ‘.promise()’ {promises} package (available). functionality merged package {mirai.promises}, allowing use promise pipe %...>% ‘mirai’. Parallel clusters (alternative communications backend R) now work existing R versions, longer requiring R >= 4.4. everywhere() evaluates expression ‘everywhere’ connected daemons compute profile. Resulting changes global environment, loaded pacakges options persisted regardless ‘cleanup’ setting (request @krlmlr #80). host_url() implemented helper function automatically construct host URL using computer’s hostname. daemon() adds argument ‘autoexit’, replaces ‘asyncdial’, govern persistence settings daemon. daemon can now survive host session re-connect another one (request @krlmlr #81). daemons(NULL) implemented variant daemons(0) also sends exit signals connected persistent daemons. dispatcher() argument ‘lock’ removed now applied cases prevent one daemon dialling dispatcher URL one time. daemon() argument ‘cleanup’ simplified logical argument, granular control offered existing integer bitmask (thanks @krlmlr #79). Daemons connecting TLS now perform synchronous dials default (documented). Fixes supplying ssh_config() specifying tunnelling ‘remote’ argument daemons(). Fixes print method subset ‘miraiCluster’ (thanks @HenrikBengtsson #83). Removes deprecated deferred evaluation pipe %>>%. Requires nanonext >= 0.10.4.","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"mirai-0110","dir":"Changelog","previous_headings":"","what":"mirai 0.11.0","title":"mirai 0.11.0","text":"CRAN release: 2023-10-06 Fulfils request R Core R Project Sprint 2023, requires R >= 4.4 (currently R-devel). make_cluster() creates ‘miraiCluster’, compatible existing functions taking ‘cluster’ object, example ‘parallel’ ‘doParallel’ / ‘foreach’ packages. status() can now take ‘miraiCluster’ argument query connection status. Simplified interface single ‘remote’ argument taking remote configuration launch daemons. Returned shell commands now custom print method means may directly copy/pasted remote machine. Can now take ‘miraiCluster’ ‘miraiNode’ return shell commands deployment remote nodes. Adds argument ‘remote’ launching remote daemons directly without recourse separate call launch_remote(). Adds argument ‘resilience’ control behaviour, using dispatcher, whether retry failed tasks daemons. remote_config() added generate configurations directly launching remote daemons, can supplied directly ‘remote’ argument. ssh_config() added convenience method generate launch configurations using SSH, including SSH tunnelling. mirai() adds logical argument ‘.signal’ whether signal condition variable within compute profile upon resolution ‘mirai’. daemon() argument ‘exitlinger’ retired daemons now synchronise host/dispatcher exit soon possible (although default ‘exitlinger’ period still applies ephemeral daemons). Optimises scheduling dispatcher: tasks longer assigned daemon exiting due specified time/task-outs. ‘errorValue’ 19 ‘Connection reset’ now returned ‘mirai’ connection either dispatcher ephemeral daemon drops, example crashed, rather remaining unresolved. Invalid type ‘…’ arguments specified daemons() dispatcher() now raise error early rather attempting launch daemons fail. Eliminates potential crash host process querying status() longer connection dispatcher. Reverts trailing line break added end ‘miraiError’ character string. Moves ‘…’ argument daemons(), dispatcher() daemon() clearly delineate core vs peripheral options. Deprecates Deferred Evaluation Pipe %>>% favour recommendation use package mirai.promises performing side effects upon ‘mirai’ resolution. Deprecated use alias server() daemon() retired. Adds ‘reference’ vignette, incorporating information readme. Requires nanonext >= 0.10.2.","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"mirai-0100","dir":"Changelog","previous_headings":"","what":"mirai 0.10.0","title":"mirai 0.10.0","text":"CRAN release: 2023-09-16 daemons() gains new argument ‘seed’ set random seed generating streams. daemon() dispatcher() gain argument ‘rs’ takes L’Ecuyer-CMRG random seed. New developer functions nextstream() nextget(), opening interfaces packages extend mirai. Runs R session --vanilla flags efficiency, avoiding lengthy startup configurations (thanks @alexpiper). Straight pass without serialization/unserialization allows higher performance lower memory utilisation. Fixes edge cases status() occasionally failing communicate dispatcher. Fixes edge cases ending session unresolved mirai resulting crash rather clean exit. specifying argument ‘force’ TRUE now immediately regenerates socket returns ongoing mirai ‘errorValue’. allows tasks consistently hang crash cancelled rather repeated new daemon connects. argument ‘’ now required longer defaults 1L. daemons status matrix adds column ‘’ ease use functions saisei() launch_local(). ‘instance’ column now always cumulative - regenerating URL saisei() longer resets counter instead turns negative new daemon connects. Improves shell quoting daemon launch commands, making easier deploy manually via launch_remote(). daemons() dispatcher() gain argument ‘pass’ support password-protected private keys supplying TLS credentials (thanks @wlandau #76). Cryptographic errors using dispatcher TLS now reported user (thanks @wlandau #76). Passing filename ‘tls’ argument daemons(), launch_local() launch_remote() now works correctly documented. Extends clarifies documentation surrounding use certificate authority signed TLS certificates. Certain error messages accurate informative. Increases performance lower resource utilisation due updates nanonext 0.10.0. Requires nanonext >= 0.10.0 R >= 3.5.","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"mirai-091","dir":"Changelog","previous_headings":"","what":"mirai 0.9.1","title":"mirai 0.9.1","text":"CRAN release: 2023-07-19 Zero-configuration experience - simply specify tls+tcp:// wss:// URL daemons(). Single-use keys certificates automatically generated. Alternatively, custom certificates may passed ‘tls’ argument daemons() daemon(), generated via Ceritficate Signing Request (CSR) Certificate Authority (CA). Example using SSH: launch_remote(\"ws://192.168.0.1:5555\", command = \"ssh\", args = c(\"-p 22 192.168.0.2\", .). Documentation updated refer consistently host daemons (rather client server) clarity. daemon() replaces server(), deprecated (although currently retained alias). launch_local() replaces launch_server() now accepts vector argument ‘url’ well numeric values select relevant dispatcher host URL, returning invisible NULL instead integer value. status() now retrieves connections daemons status, replacing call daemons() arguments (deprecated). return value $daemons now always host URL using dispatcher. Redirection stdout stderr local daemons host process now possible (running without dispatcher) specifying output=TRUE daemons() launch_local(). daemon() accepts new ‘output’ argument. saisei() argument validation now happens prior sending request dispatcher rather dispatcher. ‘miraiError’ now includes trailing line break end character vector. Requires nanonext >= 0.9.1, R requirement relaxed back >= 2.12.","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"mirai-090","dir":"Changelog","previous_headings":"","what":"mirai 0.9.0","title":"mirai 0.9.0","text":"CRAN release: 2023-06-24 mirai 0.9.0 major release focusing stability improvements. Ensures first URL retains format saisei(= 1L) called. Optimal scheduling tasks submitted prior servers coming online. Fixes rare occasions dispatcher running single server instance get stuck task. daemons() status requests rendered robust. Ensures saisei() always returns NULL ‘tcp://’ URLs used support tokens. Daemons status matrix ‘assigned’ ‘complete’ now cumulative statistics, reset upon new instances. Requires nanonext >= 0.9.0 R >= 3.5.0. Internal performance enhancements.","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"mirai-087","dir":"Changelog","previous_headings":"","what":"mirai 0.8.7","title":"mirai 0.8.7","text":"CRAN release: 2023-05-11 server() dispatcher() argument ‘asyncdial’ now FALSE default, causing functions exit connection immediately available. means distributed computing purposes, daemons() called server() launched remote resources, else server(asyncdial = TRUE) allows servers wait connection. launch_server() now parses passed URL correctness attempting launch server, producing error valid.","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"mirai-084","dir":"Changelog","previous_headings":"","what":"mirai 0.8.4","title":"mirai 0.8.4","text":"CRAN release: 2023-05-09 .() implemented wrap piped expression, ensuring return either ‘unresolvedExpr’ ‘resolvedExpr’. expressions may tested using unresolved() way ‘mirai’. allows general use contexts, including within functions. Improved error messages top level evaluation errors ‘mirai’. Requires nanonext >= 0.8.3. Internal stability performance enhancements.","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"mirai-083","dir":"Changelog","previous_headings":"","what":"mirai 0.8.3","title":"mirai 0.8.3","text":"CRAN release: 2023-04-17 accepts language expression object passed ‘.expr’ evaluation. accepts list ‘name = value’ pairs passed ‘.args’ well existing ‘…’. objects specified via ‘…’ now take precedence ‘.args’ named object appears. token appending unique token URL dispatcher listens . lock locking sockets prevent one server connecting unique URL. saisei() implemented regenerate token used given dispatcher socket. launch_server() replaces launch() launching local instances, simpler interface directly mapping server(). Automatically-launched local daemons revised use unique tokens URLs. Daemons status matrix headers updated ‘online’, ‘instance’, ‘assigned’, ‘complete’. Fixes potential issue attempting use mirai() timeouts connection server. Requires nanonext >= 0.8.2. Internal performance enhancements.","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"mirai-082","dir":"Changelog","previous_headings":"","what":"mirai 0.8.2","title":"mirai 0.8.2","text":"CRAN release: 2023-04-03 Arguments ‘pollfreqh’ ‘pollfreql’ removed longer applicable. Server dispatcher processes exit automatically connection client dropped. significantly reduces likelihood orphaned processes. launch() exported utility easily re-launching daemons timed , instance. Correct passthrough ... variables daemons() call. Requires nanonext >= 0.8.1. Internal performance enhancements.","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"mirai-081","dir":"Changelog","previous_headings":"","what":"mirai 0.8.1","title":"mirai 0.8.1","text":"CRAN release: 2023-03-17 Fixes issue daemon processes may launch certain setups (affecting binary package builds).","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"mirai-080","dir":"Changelog","previous_headings":"","what":"mirai 0.8.0","title":"mirai 0.8.0","text":"CRAN release: 2023-03-15 mirai 0.8.0 major feature release. Special thanks @wlandau suggestions, discussion testing many new capabilities. daemons() can create new profiles connect different resources e.g. servers GPU, accelerators etc. mirai() tasks can sent using specific compute profile. Supplying client URL zero port number :0 automatically assign free ephemeral port, actual port number subsequently reported daemons(). Calling arguments now provides improved view current number connections / daemons (URL, online busy status, tasks assigned completed, instance), replacing previous daemons(\"view\") functionality. dispatcher() implemented new function dispatcher. asyncdial specify server dials client. maxtasks specifying maximum number tasks exiting. idletime specifying idle time, since completion last task exiting. walltime specifying soft walltime exiting. timerstart specifying minimum number task completions starting timers. Invalid URLs provided daemons() server() now error return immediately instead potentially causing hang. eval_mirai() removed alias mirai(). ‘mirai’ processes longer launched Rscript sessions --vanilla argument enable site / user profile environment files read. Requires nanonext >= 0.8.0. Internal performance enhancements.","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"mirai-072","dir":"Changelog","previous_headings":"","what":"mirai 0.7.2","title":"mirai 0.7.2","text":"CRAN release: 2023-01-17 Internal performance enhancements.","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"mirai-071","dir":"Changelog","previous_headings":"","what":"mirai 0.7.1","title":"mirai 0.7.1","text":"CRAN release: 2022-11-15 Allow user interrupts call_mirai() (regression 0.7.0), now returning ‘miraiInterrupt’. Adds auxiliary function is_mirai_interrupt() test object ‘miraiInterrupt’. Requires nanonext >= 0.7.0: returned ‘errorValues’ e.g. mirai timeouts longer accompanied warnings. Internal performance enhancements.","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"mirai-070","dir":"Changelog","previous_headings":"","what":"mirai 0.7.0","title":"mirai 0.7.0","text":"CRAN release: 2022-10-19 daemons() now takes ‘n’ ‘.url’ arguments. ‘.url’ optional client URL allowing mirai tasks distributed across network. Compatibility existing interface retained. server function server() exported creating daemon / ephemeral processes network resources. Mirai errors formatted better now print stdout rather stderr. Improvements performance stability requiring nanonext >= 0.6.0. Internal enhancements error handling mirai / daemon process.","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"mirai-060","dir":"Changelog","previous_headings":"","what":"mirai 0.6.0","title":"mirai 0.6.0","text":"CRAN release: 2022-09-16 Notice: older package versions longer supported ‘nanonext’ >= 0.6.0. Please ensure using latest version ‘mirai’ else refrain upgrading ‘nanonext’. Internal enhancements daemons() %>>% deferred evaluation pipe.","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"mirai-053","dir":"Changelog","previous_headings":"","what":"mirai 0.5.3","title":"mirai 0.5.3","text":"CRAN release: 2022-08-16 mirai() gains ‘.args’ argument passing list objects already calling environment, allowing example mirai(func(x, y, z), .args = list(x, y, z)) rather specify mirai(func(x, y, z), x = x, y = y, z = z). Errors inside mirai now return error message character string class ‘miraiError’ ‘errorValue’, rather just nul byte. Utility function is_mirai_error() used place is_nul_byte(), longer re-exported. is_error_value() can used test errors, including timeouts ‘.timeout’ argument used. re-exports ‘nanonext’ brought -package better documentation.","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"mirai-052","dir":"Changelog","previous_headings":"","what":"mirai 0.5.2","title":"mirai 0.5.2","text":"CRAN release: 2022-07-21 Internal optimisations requiring nanonext >= 0.5.2.","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"mirai-050","dir":"Changelog","previous_headings":"","what":"mirai 0.5.0","title":"mirai 0.5.0","text":"CRAN release: 2022-06-21 Implements %>>% deferred evaluation pipe. Adds ‘.timeout’ argument mirai() ensure mirai always resolves even child process crashes etc.","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"mirai-041","dir":"Changelog","previous_headings":"","what":"mirai 0.4.1","title":"mirai 0.4.1","text":"CRAN release: 2022-04-21 Exits cleanly daemons explicitly zeroed prior ending R session. Fixes possible hang Windows shutting daemons.","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"mirai-040","dir":"Changelog","previous_headings":"","what":"mirai 0.4.0","title":"mirai 0.4.0","text":"CRAN release: 2022-04-14 Back pure R implementation thanks enhanced internal design nanonext. Adds auxiliary function is_mirai() test object mirai. Versioning system synchronise nanonext e.g. v0.4.x requires nanonext >= 0.4.0.","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"mirai-020","dir":"Changelog","previous_headings":"","what":"mirai 0.2.0","title":"mirai 0.2.0","text":"CRAN release: 2022-03-28 value mirai now stored $data optimally align underlying implementation. Package now contains C code (requires compilation), using weak references simpler management resources. Switch abstract sockets Linux.","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"mirai-011","dir":"Changelog","previous_headings":"","what":"mirai 0.1.1","title":"mirai 0.1.1","text":"CRAN release: 2022-03-15 mirai() added alias eval_mirai(); supports evaluating arbitrary length expressions wrapped {}. mirai now resolves automatically without requiring call_mirai(). Access $value directly ‘unresolved’ logical NA returned async operation yet complete. stop_mirai() added function stop evaluation ongoing async operation. Auxiliary functions is_nul_byte() unresolved() re-exported {nanonext} test evaluation errors resolution ‘mirai’ respectively. New daemons() interface set manage persistent background processes receiving ‘mirai’ requests.","code":""},{"path":"https://mirai.r-lib.org/dev/news/index.html","id":"mirai-010","dir":"Changelog","previous_headings":"","what":"mirai 0.1.0","title":"mirai 0.1.0","text":"CRAN release: 2022-02-16 Initial release.","code":""}]
